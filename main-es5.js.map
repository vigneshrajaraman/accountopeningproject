{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/Auth/auth.service.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/home/body/body.component.ts","webpack:///src/app/home/body/body.component.html","webpack:///src/app/home/body/create-account/create-account.component.ts","webpack:///src/app/home/body/create-account/create-account.component.html","webpack:///src/app/home/body/rework/rework-dialog/rework-dialog.component.ts","webpack:///src/app/home/body/rework/rework-dialog/rework-dialog.component.html","webpack:///src/app/home/body/rework/rework.component.ts","webpack:///src/app/home/body/rework/rework.component.html","webpack:///src/app/home/body/search/search-dialog/search-dialog.component.ts","webpack:///src/app/home/body/search/search-dialog/search-dialog.component.html","webpack:///src/app/home/body/search/search.component.ts","webpack:///src/app/home/body/search/search.component.html","webpack:///src/app/home/body/service/app-service.service.ts","webpack:///src/app/home/body/service/count.service.ts","webpack:///src/app/home/body/verfier/verfier-dialog/verfier-dialog.component.ts","webpack:///src/app/home/body/verfier/verfier-dialog/verfier-dialog.component.html","webpack:///src/app/home/body/verfier/verfier.component.ts","webpack:///src/app/home/body/verfier/verfier.component.html","webpack:///src/app/home/footer/footer.component.ts","webpack:///src/app/home/footer/footer.component.html","webpack:///src/app/home/header/header.component.ts","webpack:///src/app/home/header/header.component.html","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/home/menu/menu.component.ts","webpack:///src/app/home/menu/menu.component.html","webpack:///src/app/interceptor/interceptor.service.ts","webpack:///src/app/interceptor/interceptorList.ts","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/login/service/login.service.ts","webpack:///src/app/material/material.module.ts","webpack:///src/app/model/gender.ts","webpack:///src/app/model/status.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AuthService","route","token","localStorage","getItem","navigate","providedIn","routes","path","redirectTo","pathMatch","component","canActivate","children","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","BodyComponent","CreateAccountComponent","fb","service","count","genders","Array","usAmount","employeeForm","group","employeeId","firstName","value","disabled","designation","required","employeeType","salary","customerForm","customerId","middleName","lastName","employee","gender","age","pattern","correspondenceAddress","presentAddress","permanentAddress","applicationForm","applicationNo","customer","accountType","cardType","overeseasAccount","createUser","createDate","lastModifiedUser","lastModifiedDate","status","item","isNaN","Number","push","getAllEmployeeType","subscribe","data","employeeTypes","getAllAccountType","accountTypes","getAllCardType","cardTypes","console","log","valid","get","setValue","errrorflagCustomer","event","target","errorFlagEmployee","errorFlagApplication","enableSpinner","Date","SUBMIT","insertApplication","getCountRework","getCountVerifier","data1","setverifierCount","setReworkCount","application","provide","useValue","color","onSubmit","onEmployeeSubmit","updateUSAmount","onApplicationSubmit","ReworkDialogComponent","dialogRef","forEach","da","employeeTypeName","accountTypeName","cardTypeName","toString","close","ReworkComponent","dialog","displayedColumns","getAllReworkData","dataSource","sort","paginator","rowData","open","afterClosed","spinnerFlag","updateApplication","response","ngOnInit","SearchDialogComponent","APPROVE","REWORK","REJECT","CANCEL","SearchComponent","search","fromCreatedDate","toCreatedDate","AppServiceService","http","url","post","put","patch","CountService","verifier","rework","asObservable","next","VerfierDialogComponent","index","account","accountTypeId","approve","reject","cancel","VerfierComponent","getAllVerifierData","setAllVerifierStatus","FooterComponent","HeaderComponent","username","roles","clear","logout","HomeComponent","MenuComponent","verifierCount","reworkCount","role","split","getverifierCount","co","getReworkCount","InterceptorService","request","clone","headers","set","handle","useClass","HttpInterceptorProviders","multi","LoginComponent","flag","form","minLength","password","login","setItem","authority","error","LoginService","userDetails","MaterialModule","Gender","Status","environment","production","bootstrapModule","err"],"mappings":";;;;;;;;;;;;;;;;;AAAA,aAASA,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,aAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,YAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBL,GAAzB,GAA+B,GAAzC,CAAR;AACAI,SAAC,CAACE,IAAF,GAAS,kBAAT;AACA,cAAMF,CAAN;AACA,OAJM,CAAP;AAKA;;AACDL,4BAAwB,CAACQ,IAAzB,GAAgC,YAAW;AAAE,aAAO,EAAP;AAAY,KAAzD;;AACAR,4BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAS,UAAM,CAACC,OAAP,GAAiBV,wBAAjB;AACAA,4BAAwB,CAACW,EAAzB,GAA8B,yCAA9B;;;;;;;;;;;;;;;;ACZA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAMaC,W;AAEX,2BAAoBC,KAApB,EAAmC;AAAA;;AAAf,aAAAA,KAAA,GAAAA,KAAA;AAAkB;;;;sCAC3B;AACT,cAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,cAAIF,KAAK,IAAI,IAAb,EAAmB;AACjB,mBAAO,IAAP;AACD,WAFD,MAEO;AACL,iBAAKD,KAAL,CAAWI,QAAX,CAAoB,CAAC,OAAD,CAApB;AACA,mBAAO,KAAP;AACD;AAEF;;;;;;;uBAZUL,W,EAAW,8G;AAAA,K;;;aAAXA,W;AAAW,eAAXA,WAAW,K;AAAA,kBAFV;;;;;sEAEDA,W,EAAW;cAHvB,wDAGuB;eAHZ;AACVM,oBAAU,EAAE;AADF,S;AAGY,Q;;;;;;;;;;;;;;;;;;;;;;ACNxB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAWA,QAAMC,MAAM,GAAW,CACrB;AAAEC,UAAI,EAAE,EAAR;AAAYC,gBAAU,EAAE,OAAxB;AAAiCC,eAAS,EAAE;AAA5C,KADqB,EAErB;AAACF,UAAI,EAAC,OAAN;AAAeG,eAAS,EAAC;AAAzB,KAFqB,EAGrB;AAACH,UAAI,EAAC,KAAN;AAAaG,eAAS,EAAC,kEAAvB;AAAsCC,iBAAW,EAAC,CAAC,8DAAD,CAAlD;AAAiEC,cAAQ,EAAC,CACxE;AAACL,YAAI,EAAC,QAAN;AAAgBG,iBAAS,EAAE,yGAA3B;AAAkDC,mBAAW,EAAC,CAAC,8DAAD;AAA9D,OADwE,EAExE;AAACJ,YAAI,EAAC,UAAN;AAAkBG,iBAAS,EAAE,qFAA7B;AAA8CC,mBAAW,EAAC,CAAC,8DAAD;AAA1D,OAFwE,EAGxE;AAACJ,YAAI,EAAC,QAAN;AAAgBG,iBAAS,EAAE,kFAA3B;AAA2CC,mBAAW,EAAC,CAAC,8DAAD;AAAvD,OAHwE,EAIxE;AAACJ,YAAI,EAAC,QAAN;AAAgBG,iBAAS,EAAE,kFAA3B;AAA2CC,mBAAW,EAAC,CAAC,8DAAD;AAAvD,OAJwE;AAA1E,KAHqB,CAAvB;;QAgBaE,gB;;;;;YAAAA;;;;yBAAAA,gB;AAAgB,O;AAAA,gBAHlB,CAAC,6DAAaC,OAAb,CAAqBR,MAArB,CAAD,CAGkB,EAFjB,4DAEiB;;;;0HAAhBO,gB,EAAgB;AAAA;AAAA,kBAFjB,4DAEiB;AAAA,O;AAFL,K;;;;;sEAEXA,gB,EAAgB;cAJ5B,sDAI4B;eAJnB;AACRE,iBAAO,EAAE,CAAC,6DAAaD,OAAb,CAAqBR,MAArB,CAAD,CADD;AAERT,iBAAO,EAAE,CAAC,4DAAD;AAFD,S;AAImB,Q;;;;;;;;;;;;;;;;;;AC3B7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOamB,Y,GALb;AAAA;;AAME,WAAAC,KAAA,GAAQ,uBAAR;AACD,K;;;uBAFYD,Y;AAAY,K;;;YAAZA,Y;AAAY,+B;AAAA,c;AAAA,a;AAAA;AAAA;ACPzB;;;;;;;;;sEDOaA,Y,EAAY;cALxB,uDAKwB;eALd;AACTE,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,sBAFJ;AAGTC,mBAAS,EAAE,CAAC,qBAAD;AAHF,S;AAKc,Q;;;;;;;;;;;;;;;;;;AEPzwDaC,S;;;;;YAAAA,S;AAAS,kBAFR,2DAEQ;;;;yBAATA,S;AAAS,O;AAAA,iBAHT,CAAC,qFAAD,C;AAA0B,gBAV5B,CACP,uEADO,EAEP,oEAFO,EAGP,4FAHO,EAIP,wEAJO,EAKP,kEALO,EAMP,qEANO,EAOP,wEAPO,EAQP,4EARO,CAU4B;;;;0HAG1BA,S,EAAS;AAAA,uBA5BlB,2DA4BkB,EA3BlB,qEA2BkB,EA1BlB,mEA0BkB,EAzBlB,8EAyBkB,EAxBlB,8EAwBkB,EAvBlB,wEAuBkB,EAtBlB,wEAsBkB,EArBlB,0GAqBkB,EApBlB,sFAoBkB,EAnBlB,kHAmBkB,EAlBlB,mFAkBkB,EAjBlB,8GAiBkB,EAhBlB,mFAgBkB,EAflB,8GAekB;AAfG,kBAGrB,uEAHqB,EAIrB,oEAJqB,EAKrB,4FALqB,EAMrB,wEANqB,EAOrB,kEAPqB,EAQrB,qEARqB,EASrB,wEATqB,EAUrB,4EAVqB;AAeH,O;AALK,K;;;;;sEAKdA,S,EAAS;cA9BrB,sDA8BqB;eA9BZ;AACRC,sBAAY,EAAE,CACZ,2DADY,EAEZ,qEAFY,EAGZ,mEAHY,EAIZ,8EAJY,EAKZ,8EALY,EAMZ,wEANY,EAOZ,wEAPY,EAQZ,0GARY,EASZ,sFATY,EAUZ,kHAVY,EAWZ,mFAXY,EAYZ,8GAZY,EAaZ,mFAbY,EAcZ,8GAdY,CADN;AAiBRP,iBAAO,EAAE,CACP,uEADO,EAEP,oEAFO,EAGP,4FAHO,EAIP,wEAJO,EAKP,kEALO,EAMP,qEANO,EAOP,wEAPO,EAQP,4EARO,CAjBD;AA2BRQ,mBAAS,EAAE,CAAC,qFAAD,CA3BH;AA4BRC,mBAAS,EAAE,CAAC,2DAAD;AA5BH,S;AA8BY,Q;;;;;;;;;;;;;;;;;;ACxDtB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOaC,a;AAEX,+BAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,a;AAAa,K;;;YAAbA,a;AAAa,+B;AAAA,c;AAAA,a;AAAA;AAAA;ACP1B;;;;;;;;;sEDOaA,a,EAAa;cALzB,uDAKyB;eALf;AACTP,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,uBAFJ;AAGTC,mBAAS,EAAE,CAAC,sBAAD;AAHF,S;AAKe,Q;;;;;;;;;;;;;;;;;;;;AEP1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACGgC;;;;;;AAMtB;;AAA2C;;AAAqB;;;;;;AAFlE;;AAEE;;AACF;;;;;;AADS;;AAAA;;;;;;AAQP;;AAA4C;;AAAsB;;;;;;AAFpE;;AAEE;;AACF;;;;;;AADS;;AAAA;;;;;;AASP;;AAA0C;;AAAoB;;;;;;AAFhE;;AAEE;;AACF;;;;;;AADS;;AAAA;;;;;;AAMP;;AAA4D;;AAAO;;;;;;AAArB;;AAAc;;AAAA;;;;;;AAG5D;;AAAwC;;AAAkB;;;;;;AAD5D;;AACE;;AACF;;;;;;AADS;;AAAA;;;;;;AAOP;;AAAqC;;AAAe;;;;;;AACpD;;AAAoC;;AAA0B;;;;;;AAFhE;;AACE;;AACA;;AAEF;;;;;;AAHS;;AAAA;;AACA;;AAAA;;;;;;AAWP;;AAAuD;;AAAkC;;;;;;AAH3F;;AAGE;;AACF;;;;;;AADS;;AAAA;;;;;;AAQP;;AAAgD;;AAA2B;;;;;;AAF7E;;AAEE;;AACF;;;;;;AADS;;AAAA;;;;;;AASP;;AAAkD;;AAA6B;;;;;;AAFjF;;AAEE;;AACF;;;;;;AADS;;AAAA;;;;;;AAYe;;;;;;AAUtB;;AAA6C;;AAAuB;;;;;;AAFtE;;AAEE;;AACF;;;;;;AADS;;AAAA;;;;;;AAMP;;AACE;;AACF;;;;;;AAF+C;;AAC7C;;AAAA;;;;;;AAUF;;AAAwC;;AAAkB;;;;;;AAF5D;;AAEE;;AACF;;;;;;AADS;;AAAA;;;;;;AAYe;;;;;;AAItB;;AACE;;AACF;;;;;;AAF8C;;AAC5C;;AAAA;;;;;;AAKF;;AAA6C;;AAAwB;;;;;;AAFvE;;AAEE;;AACF;;;;;;AADS;;AAAA;;;;;;AAMP;;AACE;;AACF;;;;;;AAF2C;;AACzC;;AAAA;;;;;;AAKF;;AAA0C;;AAAqB;;;;;;AAFjE;;AAEE;;AACF;;;;;;AADS;;AAAA;;;;;;AAUP;;AAAkD;;AAA6B;;;;;;AADjF;;AACE;;AACF;;;;;;AADS;;AAAA;;;;;;AAUa;;;;;;AAE1B;;;;;;AACA;;AACE;;AACE;;AAAI;;AAAG;;AAAe;;AAAI;;AAC1B;;AAAI;;AAA4C;;AAClD;;AACA;;AACE;;AAAI;;AAAG;;AAAY;;AAAI;;AACvB;;AAAI;;AAA0E;;AAChF;;AACA;;AACE;;AAAI;;AAAG;;AAAY;;AAAI;;AACvB;;AAAI;;AAAoH;;AAC1H;;AACF;;;;;;AAVQ;;AAAA;;AAIA;;AAAA;;AAIA;;AAAA;;;;QD3JCM,sB;AAEX,sCAAoBC,EAApB,EAA6CC,OAA7C,EAAiFC,KAAjF,EAAqG;AAAA;;AAAjF,aAAAF,EAAA,GAAAA,EAAA;AAAyB,aAAAC,OAAA,GAAAA,OAAA;AAAoC,aAAAC,KAAA,GAAAA,KAAA;AAKjF,aAAAC,OAAA,GAAoB,IAAIC,KAAJ,EAApB;AA8GA,aAAAC,QAAA,GAAW,CAAX;AAnHwG;;;;mCAWhG;AAAA;;AACN,eAAKC,YAAL,GAAoB,KAAKN,EAAL,CAAQO,KAAR,CAAc;AAChCC,sBAAU,EAAE,CAAC,EAAD,CADoB;AAEhCC,qBAAS,EAAE,CAAC;AAAEC,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,CAFqB;AAGhCC,uBAAW,EAAE,CAAC,EAAD,EAAK,0DAAWC,QAAhB,CAHmB;AAIhCC,wBAAY,EAAE,CAAC,EAAD,CAJkB;AAKhCC,kBAAM,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWF,QAAZ,CAAL;AALwB,WAAd,CAApB;AAQA,eAAKG,YAAL,GAAoB,KAAKhB,EAAL,CAAQO,KAAR,CAAc;AAChCU,sBAAU,EAAE,CAAC,EAAD,CADoB;AAEhCR,qBAAS,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWI,QAAZ,CAAL,CAFqB;AAGhCK,sBAAU,EAAE,CAAC,EAAD,CAHoB;AAIhCC,oBAAQ,EAAE,CAAC,EAAD,CAJsB;AAKhCC,oBAAQ,EAAE,KAAKd,YALiB;AAMhCe,kBAAM,EAAE,CAAC,EAAD,EAAK,0DAAWR,QAAhB,CANwB;AAOhCS,eAAG,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWT,QAAZ,EAAsB,0DAAWU,OAAX,CAAmB,YAAnB,CAAtB,CAAL,CAP2B;AAQhCC,iCAAqB,EAAE,CAAC,EAAD,EAAK,0DAAWX,QAAhB,CARS;AAShCY,0BAAc,EAAE,CAAC,EAAD,EAAK,0DAAWZ,QAAhB,CATgB;AAUhCa,4BAAgB,EAAE,CAAC,EAAD,EAAK,0DAAWb,QAAhB;AAVc,WAAd,CAApB;AAYA,eAAKc,eAAL,GAAuB,KAAK3B,EAAL,CAAQO,KAAR,CAAc;AACnCqB,yBAAa,EAAE,CAAC,EAAD,CADoB;AAEnCC,oBAAQ,EAAE,KAAKb,YAFoB;AAGnCc,uBAAW,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWjB,QAAZ,CAAL,CAHsB;AAInCkB,oBAAQ,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWlB,QAAZ,CAAL,CAJyB;AAKnCmB,4BAAgB,EAAE,CAAC,EAAD,EAAK,0DAAWnB,QAAhB,CALiB;AAMnCoB,sBAAU,EAAE,CAAC,EAAD,CANuB;AAOnCC,sBAAU,EAAE,CAAC,EAAD,CAPuB;AAQnCC,4BAAgB,EAAE,CAAC,EAAD,CARiB;AASnCC,4BAAgB,EAAE,CAAC,EAAD,CATiB;AAUnCC,kBAAM,EAAE,CAAC,EAAD;AAV2B,WAAd,CAAvB;;AAcA,eAAK,IAAIC,IAAT,IAAiB,2DAAjB,EAAyB;AACvB,gBAAIC,KAAK,CAACC,MAAM,CAACF,IAAD,CAAP,CAAT,EAAyB;AACvB,mBAAKnC,OAAL,CAAasC,IAAb,CAAkBH,IAAlB;AACD;AACF;;AACD,eAAKrC,OAAL,CAAayC,kBAAb,GAAkCC,SAAlC,CAA4C,UAAAC,IAAI,EAAI;AAClD,iBAAI,CAACC,aAAL,GAAqBD,IAArB;AACD,WAFD;AAGA,eAAK3C,OAAL,CAAa6C,iBAAb,GAAiCH,SAAjC,CAA2C,UAAAC,IAAI,EAAI;AACjD,iBAAI,CAACG,YAAL,GAAoBH,IAApB;AACD,WAFD;AAGA,eAAK3C,OAAL,CAAa+C,cAAb,GAA8BL,SAA9B,CAAwC,UAAAC,IAAI,EAAI;AAC9C,iBAAI,CAACK,SAAL,GAAiBL,IAAjB;AACD,WAFD;AAGAM,iBAAO,CAACC,GAAR,CAAY,KAAKhD,OAAjB;AACD;;;mCA2CU;AACT+C,iBAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,iBAAO,CAACC,GAAR,CAAY,KAAKnC,YAAL,CAAkBoC,KAA9B;AACA,eAAK9C,YAAL,CAAkB+C,GAAlB,CAAsB,WAAtB,EAAmCC,QAAnC,CAA4C,KAAKtC,YAAL,CAAkBqC,GAAlB,CAAsB,WAAtB,EAAmC3C,KAA/E;;AACA,cAAI,CAAC,KAAKM,YAAL,CAAkBoC,KAAvB,EAA8B;AAC5B,iBAAKG,kBAAL,GAA0B,IAA1B;AACD,WAFD,MAEO;AACL,iBAAKA,kBAAL,GAA0B,KAA1B;AACD;;AACDL,iBAAO,CAACC,GAAR,CAAY,KAAKnC,YAAL,CAAkBN,KAA9B;AACD;;;uCAGc8C,K,EAAO;AACpB,eAAKnD,QAAL,GAAgBmD,KAAK,CAACC,MAAN,CAAa/C,KAA7B;AACD;;;2CACkB;AACjBwC,iBAAO,CAACC,GAAR,CAAY,KAAKnC,YAAL,CAAkBoC,KAA9B;;AACA,cAAI,CAAC,KAAK9C,YAAL,CAAkB8C,KAAvB,EAA8B;AAC5B,iBAAKM,iBAAL,GAAyB,IAAzB;AACD,WAFD,MAEO;AACL,iBAAKA,iBAAL,GAAyB,KAAzB;AACAR,mBAAO,CAACC,GAAR,CAAY,KAAKnC,YAAL,CAAkBN,KAA9B;AAED;AACF;;;8CAGqB;AAAA;;AACpBwC,iBAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+B,KAAKxB,eAAL,CAAqByB,KAApD;AACAF,iBAAO,CAACC,GAAR,CAAY,KAAKxB,eAAL,CAAqBjB,KAAjC;;AAEA,cAAI,CAAC,KAAKiB,eAAL,CAAqByB,KAA1B,EAAiC;AAC/B,iBAAKO,oBAAL,GAA4B,IAA5B;AACD,WAFD,MAEO;AACL,iBAAKA,oBAAL,GAA4B,KAA5B;AACAT,mBAAO,CAACC,GAAR,CAAY,KAAKxB,eAAL,CAAqBjB,KAAjC;AACA,iBAAKkD,aAAL,GAAqB,IAArB;AACA,iBAAKjC,eAAL,CAAqB0B,GAArB,CAAyB,YAAzB,EAAuCC,QAAvC,CAAgD/E,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAhD;AACA,iBAAKmD,eAAL,CAAqB0B,GAArB,CAAyB,YAAzB,EAAuCC,QAAvC,CAAgD,IAAIO,IAAJ,EAAhD;AACA,iBAAKlC,eAAL,CAAqB0B,GAArB,CAAyB,QAAzB,EAAmCC,QAAnC,CAA4C,4DAAOQ,MAAnD;AAEAZ,mBAAO,CAACC,GAAR,CAAY,KAAKxB,eAAL,CAAqBjB,KAAjC;AACA,iBAAKT,OAAL,CAAa8D,iBAAb,CAA+B,KAAKpC,eAAL,CAAqBjB,KAApD,EAA2DiC,SAA3D,CAAqE,UAAAC,IAAI,EAAI;AAC3E,oBAAI,CAAC3C,OAAL,CAAa+D,cAAb,GAA8BrB,SAA9B,CAAwC,UAAAC,IAAI,EAAE;AAC5C,sBAAI,CAAC3C,OAAL,CAAagE,gBAAb,GAAgCtB,SAAhC,CAA0C,UAAAuB,KAAK,EAAE;AAC/C,wBAAI,CAAChE,KAAL,CAAWiE,gBAAX,CAA4BD,KAA5B;;AACA,wBAAI,CAAChE,KAAL,CAAWkE,cAAX,CAA0BxB,IAA1B;AACD,iBAHD;AAID,eALD;;AAMA,oBAAI,CAACgB,aAAL,GAAqB,KAArB;AACAV,qBAAO,CAACC,GAAR,CAAYP,IAAZ;AACA,oBAAI,CAACyB,WAAL,GAAmBzB,IAAnB;AACD,aAVD;AAYD;;AACDM,iBAAO,CAACC,GAAR,CAAY,KAAKQ,oBAAjB;AACD;;;4BAlGe;AACd,iBAAO,KAAK3C,YAAL,CAAkBqC,GAAlB,CAAsB,WAAtB,CAAP;AACD;;;4BAEgB;AACf,iBAAO,KAAKrC,YAAL,CAAkBqC,GAAlB,CAAsB,YAAtB,CAAP;AACD;;;4BAEc;AACb,iBAAO,KAAKrC,YAAL,CAAkBqC,GAAlB,CAAsB,UAAtB,CAAP;AACD;;;4BACY;AACX,iBAAO,KAAKrC,YAAL,CAAkBqC,GAAlB,CAAsB,QAAtB,CAAP;AACD;;;4BAC2B;AAC1B,iBAAO,KAAKrC,YAAL,CAAkBqC,GAAlB,CAAsB,uBAAtB,CAAP;AACD;;;4BACoB;AACnB,iBAAO,KAAKrC,YAAL,CAAkBqC,GAAlB,CAAsB,gBAAtB,CAAP;AACD;;;4BACsB;AACrB,iBAAO,KAAKrC,YAAL,CAAkBqC,GAAlB,CAAsB,kBAAtB,CAAP;AACD;;;4BACiB;AAChB,iBAAO,KAAK/C,YAAL,CAAkB+C,GAAlB,CAAsB,aAAtB,CAAP;AACD;;;4BACY;AACX,iBAAO,KAAK/C,YAAL,CAAkB+C,GAAlB,CAAsB,QAAtB,CAAP;AACD;;;4BACS;AACR,iBAAO,KAAKrC,YAAL,CAAkBqC,GAAlB,CAAsB,KAAtB,CAAP;AACD;;;4BACiB;AAChB,iBAAO,KAAK1B,eAAL,CAAqB0B,GAArB,CAAyB,aAAzB,CAAP;AACD;;;4BACc;AACb,iBAAO,KAAK1B,eAAL,CAAqB0B,GAArB,CAAyB,UAAzB,CAAP;AACD;;;4BACsB;AACrB,iBAAO,KAAK1B,eAAL,CAAqB0B,GAArB,CAAyB,kBAAzB,CAAP;AACD;;;;;;;uBAzGUtD,sB,EAAsB,2H,EAAA,+I,EAAA,oI;AAAA,K;;;YAAtBA,sB;AAAsB,yC;AAAA,kFALtB,CAAC;AACVuE,eAAO,EAAE,iFADC;AAEVC,gBAAQ,EAAE;AAAEC,eAAK,EAAE;AAAT;AAFA,OAAD,CAKsB,E;AAF/B,gB;AAAA,c;AAAA,i5D;AAAA;AAAA;ACrBJ;;AACE;;AACE;;AAAiC;AAAA,mBAAY,IAAAC,QAAA,EAAZ;AAAsB,WAAtB;;AAC/B;;AACA;;AACE;;AAAW;;AAAS;;AACpB;;AACA;;AAIF;;AACA;;AACE;;AAAW;;AAAU;;AACrB;;AACA;;AAIF;;AAEA;;AACE;;AAAW;;AAAQ;;AACnB;;AACA;;AAIF;;AACA;;AACE;;AAAO;;AAAQ;;AACf;;AACE;;AACF;;AACA;;AAGF;;AACA;;AACE;;AAAW;;AAAG;;AACd;;AACA;;AAKF;;AACA;;AACE;;AAAW;;AAAsB;;AACjC;;AAEA;;AAKF;;AACA;;AACE;;AAAW;;AAAgB;;AAC3B;;AACA;;AAIF;;AACA;;AACE;;AAAW;;AAAiB;;AAC5B;;AAEA;;AAIF;;AAEA;;AACE;;AAAyD;;AAAI;;AAC/D;;AACF;;AACF;;AAEA;;AACE;;AAAiC;AAAA,mBAAY,IAAAC,gBAAA,EAAZ;AAA8B,WAA9B;;AAC/B;;AACA;;AACE;;AAAW;;AAAI;;AACf;;AACF;;AACA;;AACE;;AAAW;;AAAW;;AACtB;;AACA;;AAIF;;AACA;;AACE;;AAAW;;AAAa;;AACxB;;AACE;;AAGF;;AACF;;AACA;;AACE;;AAAW;;AAAM;;AACjB;;AAC4C;AAAA,mBAAQ,IAAAC,cAAA,QAAR;AAA8B,WAA9B;;AAD5C;;AAEA;;AAIF;;AAEA;;AACE;;AAA6D;;AAAQ;;AACrE;;AAAyD;;AAAI;;AAC/D;;AACF;;AACF;;AACA;;AACE;;AAAoC;AAAA,mBAAY,IAAAC,mBAAA,EAAZ;AAAiC,WAAjC;;AAClC;;AACA;;AACE;;AAAW;;AAAY;;AACvB;;AACE;;AAGF;;AACA;;AAIF;;AACA;;AACE;;AAAW;;AAAS;;AACpB;;AACE;;AAGF;;AACA;;AAIF;;AACA;;AACE;;AAAO;;AAAmB;;AAC1B;;AACE;;AAAgC;;AAAG;;AACnC;;AAAiC;;AAAE;;AACrC;;AACA;;AAGF;;AACA;;AACE;;AAA6D;;AAAQ;;AACrE;;AAAyD;;AAAM;;AACjE;;AACF;;AACF;;AACA;;AACE;;AACA;;AAAG;;AAAiB;;AACpB;;AACA;;AAgBF;;AACF;;;;AAvLY;;AAAA;;AACF;;AAAA;;AAK+B;;AAAA;;AAQA;;AAAA;;AASA;;AAAA;;AAQb;;AAAA;;AAEf;;AAAA;;AAO4B;;AAAA;;AAW/B;;AAAA;;AAQ+B;;AAAA;;AAU/B;;AAAA;;AAWE;;AAAA;;AACF;;AAAA;;AAS+B;;AAAA;;AAQnB;;AAAA;;AAOyD;;AAAA,2FAAuB,cAAvB,EAAuB,KAAvB,EAAuB,OAAvB,EAAuB,YAAvB;;AAEtC;;AAAA;;AAY7B;;AAAA;;AACF;;AAAA;;AAKY;;AAAA;;AAImB;;AAAA;;AAQnB;;AAAA;;AAImB;;AAAA;;AAW5B;;AAAA;;AAaI;;AAAA;;AACN;;AAAA;;;;;;;;;sEDhJE7E,sB,EAAsB;cATlC,uDASkC;eATxB;AACTR,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD,CAHF;AAITG,mBAAS,EAAE,CAAC;AACV0E,mBAAO,EAAE,iFADC;AAEVC,oBAAQ,EAAE;AAAEC,mBAAK,EAAE;AAAT;AAFA,WAAD;AAJF,S;AASwB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AEvBnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACGkC;;;;;;AAMtB;;AAA2C;;AAAqB;;;;;;AAFlE;;AAEE;;AACF;;;;;;AADS;;AAAA;;;;;;AAQP;;AAA4C;;AAAsB;;;;;;AAFpE;;AAEE;;AACF;;;;;;AADS;;AAAA;;;;;;AASP;;AAA0C;;AAAoB;;;;;;AAFhE;;AAEE;;AACF;;;;;;AADS;;AAAA;;;;;;AAMP;;AAA4D;;AAAO;;;;;;AAArB;;AAAc;;AAAA;;;;;;AAG5D;;AAAwC;;AAAkB;;;;;;AAD5D;;AACE;;AACF;;;;;;AADS;;AAAA;;;;;;AAOP;;AAAqC;;AAAe;;;;;;AACpD;;AAAoC;;AAA0B;;;;;;AAFhE;;AACE;;AACA;;AAEF;;;;;;AAHS;;AAAA;;AACA;;AAAA;;;;;;AAWP;;AAAuD;;AAAkC;;;;;;AAH3F;;AAGE;;AACF;;;;;;AADS;;AAAA;;;;;;AAQP;;AAAgD;;AAA2B;;;;;;AAF7E;;AAEE;;AACF;;;;;;AADS;;AAAA;;;;;;AASP;;AAAkD;;AAA6B;;;;;;AAFjF;;AAEE;;AACF;;;;;;AADS;;AAAA;;;;;;AAYe;;;;;;AAUtB;;AAA6C;;AAAuB;;;;;;AAFtE;;AAEE;;AACF;;;;;;AADS;;AAAA;;;;;;AAMP;;AACE;;AACF;;;;;;AAF+C;;AAC7C;;AAAA;;;;;;AAUF;;AAAwC;;AAAkB;;;;;;AAF5D;;AAEE;;AACF;;;;;;AADS;;AAAA;;;;;;AAYe;;;;;;AAItB;;AACE;;AACF;;;;;;AAF8C;;AAC5C;;AAAA;;;;;;AAKF;;AAA6C;;AAAwB;;;;;;AAFvE;;AAEE;;AACF;;;;;;AADS;;AAAA;;;;;;AAMP;;AACE;;AACF;;;;;;AAF2C;;AACzC;;AAAA;;;;;;AAKF;;AAA0C;;AAAqB;;;;;;AAFjE;;AAEE;;AACF;;;;;;AADS;;AAAA;;;;;;AAUP;;AAAkD;;AAA6B;;;;;;AADjF;;AACE;;AACF;;;;;;AADS;;AAAA;;;;QD1INK,qB;AAEX,qCAAoB7E,EAApB,EAA4C8E,SAA5C,EACkClC,IADlC,EACqD3C,OADrD,EACiF;AAAA;;AAD7D,aAAAD,EAAA,GAAAA,EAAA;AAAwB,aAAA8E,SAAA,GAAAA,SAAA;AACV,aAAAlC,IAAA,GAAAA,IAAA;AAAmB,aAAA3C,OAAA,GAAAA,OAAA;AAMrD,aAAAE,OAAA,GAAoB,IAAIC,KAAJ,EAApB;AACA,aAAAyC,aAAA,GAAyB,IAAIzC,KAAJ,EAAzB;AACA,aAAA2C,YAAA,GAAwB,IAAI3C,KAAJ,EAAxB;AACA,aAAA6C,SAAA,GAAqB,IAAI7C,KAAJ,EAArB;AA4HA,aAAAC,QAAA,GAAW,CAAX;AArIoF;;;;mCAW5E;AAAA;;AACN,eAAKC,YAAL,GAAoB,KAAKN,EAAL,CAAQO,KAAR,CAAc;AAChCC,sBAAU,EAAE,CAAC,EAAD,CADoB;AAEhCC,qBAAS,EAAE,CAAC;AAAEC,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,CAFqB;AAGhCC,uBAAW,EAAE,CAAC,EAAD,EAAK,0DAAWC,QAAhB,CAHmB;AAIhCC,wBAAY,EAAE,CAAC,EAAD,CAJkB;AAKhCC,kBAAM,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWF,QAAZ,CAAL;AALwB,WAAd,CAApB;AAQA,eAAKG,YAAL,GAAoB,KAAKhB,EAAL,CAAQO,KAAR,CAAc;AAChCU,sBAAU,EAAE,CAAC,EAAD,CADoB;AAEhCR,qBAAS,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWI,QAAZ,CAAL,CAFqB;AAGhCK,sBAAU,EAAE,CAAC,EAAD,CAHoB;AAIhCC,oBAAQ,EAAE,CAAC,EAAD,CAJsB;AAKhCC,oBAAQ,EAAE,KAAKd,YALiB;AAMhCe,kBAAM,EAAE,CAAC,EAAD,EAAK,0DAAWR,QAAhB,CANwB;AAOhCS,eAAG,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWT,QAAZ,EAAsB,0DAAWU,OAAX,CAAmB,YAAnB,CAAtB,CAAL,CAP2B;AAQhCC,iCAAqB,EAAE,CAAC,EAAD,EAAK,0DAAWX,QAAhB,CARS;AAShCY,0BAAc,EAAE,CAAC,EAAD,EAAK,0DAAWZ,QAAhB,CATgB;AAUhCa,4BAAgB,EAAE,CAAC,EAAD,EAAK,0DAAWb,QAAhB;AAVc,WAAd,CAApB;AAaA,eAAKc,eAAL,GAAuB,KAAK3B,EAAL,CAAQO,KAAR,CAAc;AACnCqB,yBAAa,EAAE,CAAC,EAAD,CADoB;AAEnCC,oBAAQ,EAAE,KAAKb,YAFoB;AAGnCc,uBAAW,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWjB,QAAZ,CAAL,CAHsB;AAInCkB,oBAAQ,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWlB,QAAZ,CAAL,CAJyB;AAKnCmB,4BAAgB,EAAE,CAAC,EAAD,EAAK,0DAAWnB,QAAhB,CALiB;AAMnCoB,sBAAU,EAAE,CAAC,EAAD,CANuB;AAOnCC,sBAAU,EAAE,CAAC,EAAD,CAPuB;AAQnCC,4BAAgB,EAAE,CAAC,EAAD,CARiB;AASnCC,4BAAgB,EAAE,CAAC,EAAD,CATiB;AAUnCC,kBAAM,EAAE,CAAC,EAAD;AAV2B,WAAd,CAAvB;;AAcA,eAAK,IAAIC,IAAT,IAAiB,2DAAjB,EAAyB;AAEvB,gBAAIC,KAAK,CAACC,MAAM,CAACF,IAAD,CAAP,CAAT,EAAyB;AACvB,mBAAKnC,OAAL,CAAasC,IAAb,CAAkBH,IAAlB;AACD;AACF;;AACD,eAAKrC,OAAL,CAAayC,kBAAb,GAAkCC,SAAlC,CAA4C,UAAAC,IAAI,EAAI;AAClDA,gBAAI,CAACmC,OAAL,CAAa,UAAAC,EAAE,EAAE;AACf,oBAAI,CAACnC,aAAL,CAAmBJ,IAAnB,CAAwBuC,EAAE,CAACC,gBAA3B;AACD,aAFD;AAGD,WAJD;AAKA,eAAKhF,OAAL,CAAa6C,iBAAb,GAAiCH,SAAjC,CAA2C,UAAAC,IAAI,EAAI;AACjDA,gBAAI,CAACmC,OAAL,CAAa,UAAAC,EAAE,EAAE;AACf,oBAAI,CAACjC,YAAL,CAAkBN,IAAlB,CAAuBuC,EAAE,CAACE,eAA1B;AACD,aAFD;AAGD,WAJD;AAKA,eAAKjF,OAAL,CAAa+C,cAAb,GAA8BL,SAA9B,CAAwC,UAAAC,IAAI,EAAI;AAC9CA,gBAAI,CAACmC,OAAL,CAAa,UAAAC,EAAE,EAAE;AACf,oBAAI,CAAC/B,SAAL,CAAeR,IAAf,CAAoBuC,EAAE,CAACG,YAAvB;AACD,aAFD;AAGD,WAJD;AAKAjC,iBAAO,CAACC,GAAR,CAAY,KAAKhD,OAAjB;AAEA,cAAMkE,WAAW,GAAG,KAAKzB,IAAL,CAAUyB,WAA9B;AACAnB,iBAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBkB,WAAtB;AACAA,qBAAW,CAACrC,gBAAZ,GAA+BqC,WAAW,CAACrC,gBAAZ,CAA6BoD,QAA7B,EAA/B;AACA,eAAKzD,eAAL,CAAqB2B,QAArB,CAA8Be,WAA9B;AACA,eAAK1C,eAAL,CAAqB0B,GAArB,CAAyB,aAAzB,EAAwCC,QAAxC,CAAiD,KAAK3B,eAAL,CAAqB0B,GAArB,CAAyB,aAAzB,EAAwC3C,KAAxC,CAA8CwE,eAA/F;AACA,eAAKvD,eAAL,CAAqB0B,GAArB,CAAyB,UAAzB,EAAqCC,QAArC,CAA8C,KAAK3B,eAAL,CAAqB0B,GAArB,CAAyB,UAAzB,EAAqC3C,KAArC,CAA2CyE,YAAzF;AACA,eAAK7E,YAAL,CAAkB+C,GAAlB,CAAsB,cAAtB,EAAsCC,QAAtC,CAA+C,KAAKhD,YAAL,CAAkB+C,GAAlB,CAAsB,cAAtB,EAAsC3C,KAAtC,CAA4CuE,gBAA3F;AACA/B,iBAAO,CAACC,GAAR,CAAY,UAAZ,EAAuB,KAAKxB,eAAL,CAAqBjB,KAA5C;AAED;;;mCA2CU;AACTwC,iBAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,iBAAO,CAACC,GAAR,CAAY,KAAKnC,YAAL,CAAkBoC,KAA9B;AACA,eAAK9C,YAAL,CAAkB+C,GAAlB,CAAsB,WAAtB,EAAmCC,QAAnC,CAA4C,KAAKtC,YAAL,CAAkBqC,GAAlB,CAAsB,WAAtB,EAAmC3C,KAA/E;;AACA,cAAI,CAAC,KAAKM,YAAL,CAAkBoC,KAAvB,EAA8B;AAC5B,iBAAKG,kBAAL,GAA0B,IAA1B;AACD,WAFD,MAEO;AACL,iBAAKA,kBAAL,GAA0B,KAA1B;AACD;;AACDL,iBAAO,CAACC,GAAR,CAAY,KAAKnC,YAAL,CAAkBN,KAA9B;AACD;;;uCAGc8C,K,EAAO;AACpB,eAAKnD,QAAL,GAAgBmD,KAAK,CAACC,MAAN,CAAa/C,KAA7B;AACD;;;2CACkB;AACjBwC,iBAAO,CAACC,GAAR,CAAY,KAAKnC,YAAL,CAAkBoC,KAA9B;;AACA,cAAI,CAAC,KAAK9C,YAAL,CAAkB8C,KAAvB,EAA8B;AAC5B,iBAAKM,iBAAL,GAAyB,IAAzB;AACD,WAFD,MAEO;AACL,iBAAKA,iBAAL,GAAyB,KAAzB;AACAR,mBAAO,CAACC,GAAR,CAAY,KAAKnC,YAAL,CAAkBN,KAA9B;AAED;AACF;;;8CAGqB;AACpBwC,iBAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+B,KAAKxB,eAAL,CAAqByB,KAApD;;AAEA,cAAI,CAAC,KAAKzB,eAAL,CAAqByB,KAA1B,EAAiC;AAC/B,iBAAKO,oBAAL,GAA4B,IAA5B;AACD,WAFD,MAEO;AACL,iBAAKA,oBAAL,GAA4B,KAA5B;AACAT,mBAAO,CAACC,GAAR,CAAY,aAAZ,EAA0B,KAAKxB,eAAL,CAAqBjB,KAA/C;AACA,iBAAKiB,eAAL,CAAqB0B,GAArB,CAAyB,YAAzB,EAAuCC,QAAvC,CAAgD/E,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAhD;AACA,iBAAKmD,eAAL,CAAqB0B,GAArB,CAAyB,YAAzB,EAAuCC,QAAvC,CAAgD,IAAIO,IAAJ,EAAhD;AACA,iBAAKiB,SAAL,CAAeO,KAAf,CAAqB,KAAK1D,eAAL,CAAqBjB,KAA1C;AACD;;AACDwC,iBAAO,CAACC,GAAR,CAAY,KAAKQ,oBAAjB;AACD;;;4BAlFe;AACd,iBAAO,KAAK3C,YAAL,CAAkBqC,GAAlB,CAAsB,WAAtB,CAAP;AACD;;;4BAEgB;AACf,iBAAO,KAAKrC,YAAL,CAAkBqC,GAAlB,CAAsB,YAAtB,CAAP;AACD;;;4BAEc;AACb,iBAAO,KAAKrC,YAAL,CAAkBqC,GAAlB,CAAsB,UAAtB,CAAP;AACD;;;4BACY;AACX,iBAAO,KAAKrC,YAAL,CAAkBqC,GAAlB,CAAsB,QAAtB,CAAP;AACD;;;4BAC2B;AAC1B,iBAAO,KAAKrC,YAAL,CAAkBqC,GAAlB,CAAsB,uBAAtB,CAAP;AACD;;;4BACoB;AACnB,iBAAO,KAAKrC,YAAL,CAAkBqC,GAAlB,CAAsB,gBAAtB,CAAP;AACD;;;4BACsB;AACrB,iBAAO,KAAKrC,YAAL,CAAkBqC,GAAlB,CAAsB,kBAAtB,CAAP;AACD;;;4BACiB;AAChB,iBAAO,KAAK/C,YAAL,CAAkB+C,GAAlB,CAAsB,aAAtB,CAAP;AACD;;;4BACY;AACX,iBAAO,KAAK/C,YAAL,CAAkB+C,GAAlB,CAAsB,QAAtB,CAAP;AACD;;;4BACS;AACR,iBAAO,KAAKrC,YAAL,CAAkBqC,GAAlB,CAAsB,KAAtB,CAAP;AACD;;;4BACiB;AAChB,iBAAO,KAAK1B,eAAL,CAAqB0B,GAArB,CAAyB,aAAzB,CAAP;AACD;;;4BACc;AACb,iBAAO,KAAK1B,eAAL,CAAqB0B,GAArB,CAAyB,UAAzB,CAAP;AACD;;;4BACsB;AACrB,iBAAO,KAAK1B,eAAL,CAAqB0B,GAArB,CAAyB,kBAAzB,CAAP;AACD;;;;;;;uBA5HUwB,qB,EAAqB,2H,EAAA,sI,EAAA,gEAGtB,wEAHsB,C,EAGP,+I;AAAA,K;;;YAHdA,qB;AAAqB,wC;AAAA,gB;AAAA,c;AAAA,i5D;AAAA;AAAA;AChBlC;;AACI;;AACE;;AAAiC;AAAA,mBAAY,IAAAJ,QAAA,EAAZ;AAAsB,WAAtB;;AAC/B;;AACA;;AACE;;AAAW;;AAAS;;AACpB;;AACA;;AAIF;;AACA;;AACE;;AAAW;;AAAU;;AACrB;;AACA;;AAIF;;AAEA;;AACE;;AAAW;;AAAQ;;AACnB;;AACA;;AAIF;;AACA;;AACE;;AAAO;;AAAQ;;AACf;;AACE;;AACF;;AACA;;AAGF;;AACA;;AACE;;AAAW;;AAAG;;AACd;;AACA;;AAKF;;AACA;;AACE;;AAAW;;AAAsB;;AACjC;;AAEA;;AAKF;;AACA;;AACE;;AAAW;;AAAgB;;AAC3B;;AACA;;AAIF;;AACA;;AACE;;AAAW;;AAAiB;;AAC5B;;AAEA;;AAIF;;AAEA;;AACE;;AAAyD;;AAAI;;AAC/D;;AACF;;AACF;;AAEA;;AACE;;AAAiC;AAAA,mBAAY,IAAAC,gBAAA,EAAZ;AAA8B,WAA9B;;AAC/B;;AACA;;AACE;;AAAW;;AAAI;;AACf;;AACF;;AACA;;AACE;;AAAW;;AAAW;;AACtB;;AACA;;AAIF;;AACA;;AACE;;AAAW;;AAAa;;AACxB;;AACE;;AAGF;;AACF;;AACA;;AACE;;AAAW;;AAAM;;AACjB;;AAC4C;AAAA,mBAAQ,IAAAC,cAAA,QAAR;AAA8B,WAA9B;;AAD5C;;AAEA;;AAIF;;AAEA;;AACE;;AAA6D;;AAAQ;;AACrE;;AAAyD;;AAAI;;AAC/D;;AACF;;AACF;;AACA;;AACE;;AAAoC;AAAA,mBAAY,IAAAC,mBAAA,EAAZ;AAAiC,WAAjC;;AAClC;;AACA;;AACE;;AAAW;;AAAY;;AACvB;;AACE;;AAGF;;AACA;;AAIF;;AACA;;AACE;;AAAW;;AAAS;;AACpB;;AACE;;AAGF;;AACA;;AAIF;;AACA;;AACE;;AAAO;;AAAmB;;AAC1B;;AACE;;AAAgC;;AAAG;;AACnC;;AAAiC;;AAAE;;AACrC;;AACA;;AAGF;;AACA;;AACE;;AAA6D;;AAAQ;;AACrE;;AAAyD;;AAAM;;AACjE;;AACF;;AACF;;AAEF;;;;AAnKY;;AAAA;;AACF;;AAAA;;AAK+B;;AAAA;;AAQA;;AAAA;;AASA;;AAAA;;AAQb;;AAAA;;AAEf;;AAAA;;AAO4B;;AAAA;;AAW/B;;AAAA;;AAQ+B;;AAAA;;AAU/B;;AAAA;;AAWE;;AAAA;;AACF;;AAAA;;AAS+B;;AAAA;;AAQnB;;AAAA;;AAOyD;;AAAA,2FAAuB,cAAvB,EAAuB,KAAvB,EAAuB,OAAvB,EAAuB,YAAvB;;AAEtC;;AAAA;;AAY7B;;AAAA;;AACF;;AAAA;;AAKY;;AAAA;;AAImB;;AAAA;;AAQnB;;AAAA;;AAImB;;AAAA;;AAW5B;;AAAA;;;;;;;;;sEDzIFC,qB,EAAqB;cALjC,uDAKiC;eALvB;AACTtF,kBAAQ,EAAE,mBADD;AAETC,qBAAW,EAAE,gCAFJ;AAGTC,mBAAS,EAAE,CAAC,+BAAD;AAHF,S;AAKuB,Q;;;;;;;;kBAG7B,oD;mBAAO,wE;;;;;;;;;;;;;;;;;;;;;;;AEnBZ;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACEA;;;;;;AAOY;;AAAuC;;AAAe;;;;;;AACtD;;AAAwC;;AAA0B;;;;;;AAA1B;;AAAA;;;;;;AAKxC;;AAAuC;;AAAU;;;;;;AACjD;;AAAwC;;AAA+B;;;;;;AAA/B;;AAAA;;;;;;AAKxC;;AAAuC;;AAAa;;;;;;AACpD;;AAAwC;;AAAwC;;;;;;AAAxC;;AAAA;;;;;;AAKxC;;AAAuC;;AAAO;;;;;;AAC9C;;AAAwC;;AAAmB;;;;;;AAAnB;;AAAA;;;;;;AAIxC;;AAAuD;;AAAK;;;;;;;;AAC5D;;AACI;;AAAU;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAA+B;;AAAW;;AACxD;;;;;;AAGF;;;;;;AACA;;;;;;;;QDxBG6F,e;AASX,+BAAoBrF,OAApB,EAAuDsF,MAAvD,EAAkFrF,KAAlF,EAAuG;AAAA;;AAAnF,aAAAD,OAAA,GAAAA,OAAA;AAAmC,aAAAsF,MAAA,GAAAA,MAAA;AAA2B,aAAArF,KAAA,GAAAA,KAAA;AAFlF,aAAAsF,gBAAA,GAAmB,CAAC,eAAD,EAAkB,oBAAlB,EAAwC,aAAxC,EAAuD,QAAvD,EAAiE,MAAjE,CAAnB;AAE0G;;;;mCAE/F;AAAA;;AACT,eAAKvF,OAAL,CAAawF,gBAAb,GAAgC9C,SAAhC,CAA0C,UAACC,IAAD,EAAU;AAClD,kBAAI,CAAC8C,UAAL,GAAkB,IAAI,0EAAJ,CAAuB9C,IAAvB,CAAlB;AACA,kBAAI,CAAC8C,UAAL,CAAgBC,IAAhB,GAAuB,MAAI,CAACA,IAA5B;AACA,kBAAI,CAACD,UAAL,CAAgBE,SAAhB,GAA4B,MAAI,CAACA,SAAjC;AAED,WALD;AAOD;;;mCAEUC,O,EAAS;AAAA;;AAClB3C,iBAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB0C,OAAvB;AACA,cAAIf,SAAS,GAAG,KAAKS,MAAL,CAAYO,IAAZ,CAAiB,4FAAjB,EAAwC;AACtDlD,gBAAI,EAAE;AAAEyB,yBAAW,EAAEwB;AAAf;AADgD,WAAxC,CAAhB;AAIAf,mBAAS,CAACiB,WAAV,GAAwBpD,SAAxB,CAAkC,UAAAqC,EAAE,EAAI;AACtC,kBAAI,CAACgB,WAAL,GAAmB,IAAnB;AACA9C,mBAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB6B,EAAzB;;AACA,kBAAI,CAAC/E,OAAL,CAAagG,iBAAb,CAA+BjB,EAA/B,EAAmCrC,SAAnC,CAA6C,UAACuD,QAAD,EAAc;AACzD,oBAAI,CAACjG,OAAL,CAAagE,gBAAb,GAAgCtB,SAAhC,CAA0C,UAAAC,IAAI,EAAI;AAChD,sBAAI,CAAC3C,OAAL,CAAa+D,cAAb,GAA8BrB,SAA9B,CAAwC,UAAAuB,KAAK,EAAI;AAC/C,wBAAI,CAAChE,KAAL,CAAWiE,gBAAX,CAA4BvB,IAA5B;;AACA,wBAAI,CAAC1C,KAAL,CAAWkE,cAAX,CAA0BF,KAA1B;;AACA,wBAAI,CAAC8B,WAAL,GAAmB,KAAnB;AACA9C,yBAAO,CAACC,GAAR,CAAY+C,QAAZ;;AACA,wBAAI,CAACC,QAAL;AACD,iBAND;AAOD,eARD;AAUD,aAXD;AAYD,WAfD;AAgBD;;;;;;;uBA3CUb,e,EAAe,+I,EAAA,mI,EAAA,oI;AAAA,K;;;YAAfA,e;AAAe,iC;AAAA;AAAA;0EAIf,8D,EAAS,I;;0EACT,wE,EAAc,I;;;;;;;;;;;;;;;ACpB3B;;AAA2B;;AAAW;;AACtC;;AACA;;AACA;;AACI;;AACI;;AAGE;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAEA;;AACE;;AACA;;AAGJ;;AAEE;;AACA;;AACF;;AAEA;;AACF;;AACF;;;;AA1CS;;AAAA;;AAGa;;AAAA;;AAiCG;;AAAA;;AACP;;AAAA;;AAGC;;AAAA;;;;;;;;;sED3BVA,e,EAAe;cAL3B,uDAK2B;eALjB;AACT/F,kBAAQ,EAAE,YADD;AAETC,qBAAW,EAAE,yBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKiB,Q;;;;;;;;;;gBAIzB,uD;iBAAU,8D,EAAS;AAAE,sBAAQ;AAAV,W;;;gBACnB,uD;iBAAU,wE,EAAc;AAAC,sBAAQ;AAAT,W;;;;;;;;;;;;;;;;;;;;AEpB3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACeY;;AAA2C;;AAAqB;;;;;;AAFpE;;AAEI;;AACJ;;;;;;AADW;;AAAA;;;;;;AASP;;AAA4C;;AAAsB;;;;;;AAFtE;;AAEI;;AACJ;;;;;;AADW;;AAAA;;;;;;AASP;;AAA0C;;AAAoB;;;;;;AAFlE;;AAEI;;AACJ;;;;;;AADW;;AAAA;;;;;;AAOP;;AAA4D;;AAAO;;;;;;AAArB;;AAAc;;AAAA;;;;;;AAG5D;;AAAwC;;AAAkB;;;;;;AAD9D;;AACI;;AACJ;;;;;;AADW;;AAAA;;;;;;AAOP;;AAAqC;;AAAe;;;;;;AACpD;;AAAoC;;AAA0B;;;;;;AAFlE;;AACI;;AACA;;AAEJ;;;;;;AAHW;;AAAA;;AACA;;AAAA;;;;;;AAYP;;AAAuD;;AAAkC;;;;;;AAH7F;;AAGI;;AACJ;;;;;;AADW;;AAAA;;;;;;AASP;;AAAgD;;AAA2B;;;;;;AAF/E;;AAEI;;AACJ;;;;;;AADW;;AAAA;;;;;;AAUP;;AAAkD;;AAA6B;;;;;;AAFnF;;AAEI;;AACJ;;;;;;AADW;;AAAA;;;;;;AAUP;;AACI;;AACJ;;;;;;AAF8C;;AAC1C;;AAAA;;;;;;AAKJ;;AAA6C;;AAAwB;;;;;;AAFzE;;AAEI;;AACJ;;;;;;AADW;;AAAA;;;;;;AAOP;;AACI;;AACJ;;;;;;AAF2C;;AACvC;;AAAA;;;;;;AAKJ;;AAA0C;;AAAqB;;;;;;AAFnE;;AAEI;;AACJ;;;;;;AADW;;AAAA;;;;;;AAWP;;AAAkD;;AAA6B;;;;;;AADnF;;AACI;;AACJ;;;;;;AADW;;AAAA;;;;;;AAUP;;AAA6C;;AAAuB;;;;;;AAFxE;;AAEI;;AACJ;;;;;;AADW;;AAAA;;;;;;AAOP;;AACI;;AACJ;;;;;;AAF+C;;AAC3C;;AAAA;;;;;;AAWJ;;AAAwC;;AAAkB;;;;;;AAF9D;;AAEI;;AACJ;;;;;;AADW;;AAAA;;;;QDvIN2G,qB;AACX,qCAAoBpG,EAApB,EAA4C8E,SAA5C,EACkClC,IADlC,EACqD3C,OADrD,EACiF;AAAA;;AAD7D,aAAAD,EAAA,GAAAA,EAAA;AAAwB,aAAA8E,SAAA,GAAAA,SAAA;AACV,aAAAlC,IAAA,GAAAA,IAAA;AAAmB,aAAA3C,OAAA,GAAAA,OAAA;AAIrD,aAAAE,OAAA,GAAoB,IAAIC,KAAJ,EAApB;AACA,aAAAyC,aAAA,GAA0B,IAAIzC,KAAJ,EAA1B;AACA,aAAA2C,YAAA,GAAyB,IAAI3C,KAAJ,EAAzB;AACA,aAAA6C,SAAA,GAAsB,IAAI7C,KAAJ,EAAtB;AACA,aAAAC,QAAA,GAAW,CAAX;AARoF;;;;mCAa5E;AAAA;;AACN,eAAKC,YAAL,GAAoB,KAAKN,EAAL,CAAQO,KAAR,CAAc;AAChCC,sBAAU,EAAE,CAAC;AAAEE,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,CADoB;AAEhCF,qBAAS,EAAE,CAAC;AAAEC,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,CAFqB;AAGhCC,uBAAW,EAAE,CAAC;AAAEF,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,EAAgC,0DAAWE,QAA3C,CAHmB;AAIhCC,wBAAY,EAAE,CAAC;AAAEJ,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,CAJkB;AAKhCI,kBAAM,EAAE,CAAC;AAAEL,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,EAAgC,CAAC,0DAAWE,QAAZ,CAAhC;AALwB,WAAd,CAApB;AAQA,eAAKG,YAAL,GAAoB,KAAKhB,EAAL,CAAQO,KAAR,CAAc;AAChCU,sBAAU,EAAE,CAAC;AAAEP,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,CADoB;AAEhCF,qBAAS,EAAE,CAAC;AAAEC,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,EAAgC,CAAC,0DAAWE,QAAZ,CAAhC,CAFqB;AAGhCK,sBAAU,EAAE,CAAC;AAAER,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,CAHoB;AAIhCQ,oBAAQ,EAAE,CAAC;AAAET,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,CAJsB;AAKhCS,oBAAQ,EAAE,KAAKd,YALiB;AAMhCe,kBAAM,EAAE,CAAC;AAAEX,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,EAAgC,0DAAWE,QAA3C,CANwB;AAOhCS,eAAG,EAAE,CAAC;AAAEZ,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,EAAgC,CAAC,0DAAWE,QAAZ,EAAsB,0DAAWU,OAAX,CAAmB,YAAnB,CAAtB,CAAhC,CAP2B;AAQhCC,iCAAqB,EAAE,CAAC;AAAEd,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,EAAgC,0DAAWE,QAA3C,CARS;AAShCY,0BAAc,EAAE,CAAC;AAAEf,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,EAAgC,0DAAWE,QAA3C,CATgB;AAUhCa,4BAAgB,EAAE,CAAC;AAAEhB,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,EAAgC,0DAAWE,QAA3C;AAVc,WAAd,CAApB;AAaA,eAAKc,eAAL,GAAuB,KAAK3B,EAAL,CAAQO,KAAR,CAAc;AACnCuB,uBAAW,EAAE,CAAC;AAAEpB,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,EAAgC,CAAC,0DAAWE,QAAZ,CAAhC,CADsB;AAEnCe,yBAAa,EAAE,CAAC;AAAElB,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,CAFoB;AAGnCkB,oBAAQ,EAAE,KAAKb,YAHoB;AAInCe,oBAAQ,EAAE,CAAC;AAAErB,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,EAAgC,CAAC,0DAAWE,QAAZ,CAAhC,CAJyB;AAKnCmB,4BAAgB,EAAE,CAAC;AAAEtB,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,EAAgC,0DAAWE,QAA3C,CALiB;AAMnCoB,sBAAU,EAAE,CAAC;AAAEvB,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,CANuB;AAOnCuB,sBAAU,EAAE,CAAC;AAAExB,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,CAPuB;AAQnCwB,4BAAgB,EAAE,CAAC;AAAEzB,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,CARiB;AASnCyB,4BAAgB,EAAE,CAAC;AAAE1B,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,CATiB;AAUnC0B,kBAAM,EAAE,CAAC;AAAE3B,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD;AAV2B,WAAd,CAAvB;AAaA,eAAKgB,eAAL,CAAqB0B,GAArB,CAAyB,eAAzB;;AACA,eAAK,IAAIf,IAAT,IAAiB,2DAAjB,EAAyB;AACvB,gBAAIC,KAAK,CAACC,MAAM,CAACF,IAAD,CAAP,CAAT,EAAyB;AACvB,mBAAKnC,OAAL,CAAasC,IAAb,CAAkBH,IAAlB;AACD;AACF;;AAED,eAAKrC,OAAL,CAAayC,kBAAb,GAAkCC,SAAlC,CAA4C,UAAAC,IAAI,EAAI;AAClDA,gBAAI,CAACmC,OAAL,CAAa,UAAAC,EAAE,EAAI;AACjB,oBAAI,CAACnC,aAAL,CAAmBJ,IAAnB,CAAwBuC,EAAE,CAACC,gBAA3B;AACD,aAFD;AAGD,WAJD;AAMA,eAAKhF,OAAL,CAAa6C,iBAAb,GAAiCH,SAAjC,CAA2C,UAAAC,IAAI,EAAI;AACjDM,mBAAO,CAACC,GAAR,CAAYP,IAAZ;AACAA,gBAAI,CAACmC,OAAL,CAAa,UAAAC,EAAE,EAAI;AACjB9B,qBAAO,CAACC,GAAR,CAAY6B,EAAZ;;AACA,oBAAI,CAACjC,YAAL,CAAkBN,IAAlB,CAAuBuC,EAAE,CAACE,eAA1B;AACD,aAHD;AAID,WAND;AAQA,eAAKjF,OAAL,CAAa+C,cAAb,GAA8BL,SAA9B,CAAwC,UAAAC,IAAI,EAAI;AAC9CA,gBAAI,CAACmC,OAAL,CAAa,UAAAC,EAAE,EAAI;AACjB,oBAAI,CAAC/B,SAAL,CAAeR,IAAf,CAAoBuC,EAAE,CAACG,YAAvB;AACD,aAFD;AAID,WALD;AAQA,cAAMd,WAAW,GAAG,KAAKzB,IAAL,CAAUyB,WAA9B;AACAnB,iBAAO,CAACC,GAAR,CAAYkB,WAAZ;AACAA,qBAAW,CAACrC,gBAAZ,GAA+BqC,WAAW,CAACrC,gBAAZ,CAA6BoD,QAA7B,EAA/B;AACA,eAAKzD,eAAL,CAAqB2B,QAArB,CAA8Be,WAA9B;AACA,eAAK1C,eAAL,CAAqB0B,GAArB,CAAyB,aAAzB,EAAwCC,QAAxC,CAAiD,KAAK3B,eAAL,CAAqB0B,GAArB,CAAyB,aAAzB,EAAwC3C,KAAxC,CAA8CwE,eAA/F;AACA,eAAKvD,eAAL,CAAqB0B,GAArB,CAAyB,UAAzB,EAAqCC,QAArC,CAA8C,KAAK3B,eAAL,CAAqB0B,GAArB,CAAyB,UAAzB,EAAqC3C,KAArC,CAA2CyE,YAAzF;AACA,eAAK7E,YAAL,CAAkB+C,GAAlB,CAAsB,cAAtB,EAAsCC,QAAtC,CAA+C,KAAKhD,YAAL,CAAkB+C,GAAlB,CAAsB,cAAtB,EAAsC3C,KAAtC,CAA4CuE,gBAA3F;AAEA/B,iBAAO,CAACC,GAAR;AACAD,iBAAO,CAACC,GAAR,CAAYkB,WAAW,CAACvC,WAAxB;AAED;;;uCA2Cc0B,K,EAAO;AACpB,eAAKnD,QAAL,GAAgBmD,KAAK,CAACC,MAAN,CAAa/C,KAA7B;AACD;;;kCACS;AACR,eAAKiB,eAAL,CAAqB0B,GAArB,CAAyB,QAAzB,EAAmCC,QAAnC,CAA4C,4DAAO+C,OAAnD;AACA,eAAKvB,SAAL,CAAeO,KAAf,CAAqB,KAAK1D,eAAL,CAAqBjB,KAA1C;AACD;;;iCACQ;AACP,eAAKiB,eAAL,CAAqB0B,GAArB,CAAyB,QAAzB,EAAmCC,QAAnC,CAA4C,4DAAOgD,MAAnD;AACA,eAAKxB,SAAL,CAAeO,KAAf,CAAqB,KAAK1D,eAAL,CAAqBjB,KAA1C;AACD;;;iCACQ;AACP,eAAKiB,eAAL,CAAqB0B,GAArB,CAAyB,QAAzB,EAAmCC,QAAnC,CAA4C,4DAAOiD,MAAnD;AACA,eAAKzB,SAAL,CAAeO,KAAf,CAAqB,KAAK1D,eAAL,CAAqBjB,KAA1C;AACD;;;iCACQ;AACP,eAAKiB,eAAL,CAAqB0B,GAArB,CAAyB,QAAzB,EAAmCC,QAAnC,CAA4C,4DAAOkD,MAAnD;AACA,eAAK1B,SAAL,CAAeO,KAAf,CAAqB,KAAK1D,eAAL,CAAqBjB,KAA1C;AACD;;;4BA5De;AACd,iBAAO,KAAKM,YAAL,CAAkBqC,GAAlB,CAAsB,WAAtB,CAAP;AACD;;;4BAEgB;AACf,iBAAO,KAAKrC,YAAL,CAAkBqC,GAAlB,CAAsB,YAAtB,CAAP;AACD;;;4BAEc;AACb,iBAAO,KAAKrC,YAAL,CAAkBqC,GAAlB,CAAsB,UAAtB,CAAP;AACD;;;4BACY;AACX,iBAAO,KAAKrC,YAAL,CAAkBqC,GAAlB,CAAsB,QAAtB,CAAP;AACD;;;4BAC2B;AAC1B,iBAAO,KAAKrC,YAAL,CAAkBqC,GAAlB,CAAsB,uBAAtB,CAAP;AACD;;;4BACoB;AACnB,iBAAO,KAAKrC,YAAL,CAAkBqC,GAAlB,CAAsB,gBAAtB,CAAP;AACD;;;4BACsB;AACrB,iBAAO,KAAKrC,YAAL,CAAkBqC,GAAlB,CAAsB,kBAAtB,CAAP;AACD;;;4BACiB;AAChB,iBAAO,KAAK/C,YAAL,CAAkB+C,GAAlB,CAAsB,aAAtB,CAAP;AACD;;;4BACY;AACX,iBAAO,KAAK/C,YAAL,CAAkB+C,GAAlB,CAAsB,QAAtB,CAAP;AACD;;;4BACS;AACR,iBAAO,KAAKrC,YAAL,CAAkBqC,GAAlB,CAAsB,KAAtB,CAAP;AACD;;;4BACiB;AAChB,iBAAO,KAAK1B,eAAL,CAAqB0B,GAArB,CAAyB,aAAzB,CAAP;AACD;;;4BACc;AACb,iBAAO,KAAK1B,eAAL,CAAqB0B,GAArB,CAAyB,UAAzB,CAAP;AACD;;;4BACsB;AACrB,iBAAO,KAAK1B,eAAL,CAAqB0B,GAArB,CAAyB,kBAAzB,CAAP;AACD;;;;;;;uBAnIU+C,qB,EAAqB,2H,EAAA,sI,EAAA,gEAEtB,wEAFsB,C,EAEP,+I;AAAA,K;;;YAFdA,qB;AAAqB,wC;AAAA,e;AAAA,c;AAAA,81D;AAAA;AAAA;AChBlC;;AAAqB;;AAAiB;;AACtC;;AAEA;;AACI;;AACI;;AAAW;;AAAc;;AACzB;;AACJ;;AAEJ;;AACI;;AACI;;AAAW;;AAAS;;AACpB;;AACA;;AAIJ;;AAEA;;AACI;;AAAW;;AAAU;;AACrB;;AACA;;AAIJ;;AAEA;;AACI;;AAAW;;AAAQ;;AACnB;;AACA;;AAIJ;;AAEA;;AACI;;AAAO;;AAAQ;;AACf;;AACI;;AACJ;;AACA;;AAGJ;;AACA;;AACI;;AAAW;;AAAG;;AACd;;AACA;;AAKJ;;AAEA;;AACI;;AAAW;;AAAsB;;AACjC;;AAEA;;AAKJ;;AAEA;;AACI;;AAAW;;AAAgB;;AAC3B;;AACA;;AAIJ;;AAEA;;AACI;;AAAW;;AAAiB;;AAC5B;;AAEA;;AAIJ;;AACJ;;AAII;;AACI;;AAAW;;AAAY;;AACvB;;AACI;;AAGJ;;AACA;;AAIJ;;AAEA;;AACI;;AAAW;;AAAS;;AACpB;;AACI;;AAGJ;;AACA;;AAIJ;;AAEA;;AACI;;AAAO;;AAAmB;;AAC1B;;AACI;;AAA+B;;AAAG;;AAClC;;AAAgC;;AAAE;;AACtC;;AACA;;AAGJ;;AACJ;;AAEI;;AACI;;AAAW;;AAAW;;AACtB;;AACA;;AAIJ;;AAEA;;AACI;;AAAW;;AAAa;;AACxB;;AACI;;AAGJ;;AACJ;;AAEA;;AACI;;AAAW;;AAAM;;AACjB;;AAC8C;AAAA,mBAAQ,IAAAzB,cAAA,QAAR;AAA8B,WAA9B;;AAD9C;;AAEA;;AAIJ;;AAEJ;;AACA;;AACA;;AACA;;AAEI;;AAAoE;;AAAK;;AAE3E;;;;AA/JI;;AAAA;;AAMD;;AAAA;;AAIoC;;AAAA;;AASA;;AAAA;;AASA;;AAAA;;AASX;;AAAA;;AAEjB;;AAAA;;AAO4B;;AAAA;;AAY7B;;AAAA;;AAS6B;;AAAA;;AAW7B;;AAAA;;AAWY;;AAAA;;AAIiB;;AAAA;;AASjB;;AAAA;;AAIiB;;AAAA;;AAY5B;;AAAA;;AAIR;;AAAA;;AAKoC;;AAAA;;AASjB;;AAAA;;AAQuD;;AAAA,2FAAuB,cAAvB,EAAuB,KAAvB,EAAuB,OAAvB,EAAuB,YAAvB;;AAEtC;;AAAA;;AAWK;;AAAA;;;;;;;;;sEDhJjCyB,qB,EAAqB;cALjC,uDAKiC;eALvB;AACT7G,kBAAQ,EAAE,mBADD;AAETC,qBAAW,EAAE,gCAFJ;AAGTC,mBAAS,EAAE,CAAC,+BAAD;AAHF,S;AAKuB,Q;;;;;;;;kBAE7B,oD;mBAAO,wE;;;;;;;;;;;;;;;;;;;;;;;AElBZ;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;AC8BoB;;AAAuC;;AAAe;;;;;;AACtD;;AAAwC;;AAA0B;;;;;;AAA1B;;AAAA;;;;;;AAIxC;;AAAuC;;AAAU;;;;;;AACjD;;AAAwC;;AAA+B;;;;;;AAA/B;;AAAA;;;;;;AAIxC;;AAAuC;;AAAa;;;;;;AACpD;;AAAwC;;AAAwC;;;;;;AAAxC;;AAAA;;;;;;AAIxC;;AAAuC;;AAAO;;;;;;AAC9C;;AAAwC;;AAAmB;;;;;;AAAnB;;AAAA;;;;;;AAIxC;;AAAuD;;AAAK;;;;;;;;AAC5D;;AACI;;AAAU;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAA8B;;AAAW;;AACvD;;;;;;AAGJ;;;;;;AACA;;;;;;;;QD3CHgH,e;AAIX,+BAAoBxG,OAApB,EAAwDD,EAAxD,EAAgFuF,MAAhF,EAAmG;AAAA;;AAA/E,aAAAtF,OAAA,GAAAA,OAAA;AAAoC,aAAAD,EAAA,GAAAA,EAAA;AAAwB,aAAAuF,MAAA,GAAAA,MAAA;AAEhF,aAAAC,gBAAA,GAAmB,CAAC,eAAD,EAAkB,oBAAlB,EAAwC,aAAxC,EAAuD,QAAvD,EAAiE,MAAjE,CAAnB;AAFsG;;;;mCAM9F;AAEN,eAAKE,UAAL,GAAkB,IAAI,0EAAJ,CAAuB,IAAvB,CAAlB;AACA,eAAKgB,MAAL,GAAc,KAAK1G,EAAL,CAAQO,KAAR,CAAc;AAC1BqB,yBAAa,EAAE,CAAC,EAAD,CADW;AAE1B+E,2BAAe,EAAE,CAAC,EAAD,CAFS;AAG1BC,yBAAa,EAAE,CAAC,EAAD;AAHW,WAAd,CAAd;AAKD;;;mCACU;AAAA;;AACT,eAAK3G,OAAL,CAAayG,MAAb,CAAoB,KAAKA,MAAL,CAAYhG,KAAhC,EAAuCiC,SAAvC,CAAiD,UAAAC,IAAI,EAAI;AACvD,kBAAI,CAAC8C,UAAL,CAAgB9C,IAAhB,GAAsBA,IAAtB;AACA,kBAAI,CAAC8C,UAAL,CAAgBC,IAAhB,GAAuB,MAAI,CAACA,IAA5B;AACA,kBAAI,CAACD,UAAL,CAAgBE,SAAhB,GAA4B,MAAI,CAACA,SAAjC;AACD,WAJD;AAKD;;;mCACUC,O,EAAS;AAClB3C,iBAAO,CAACC,GAAR,CAAY0C,OAAZ;AACA,cAAIf,SAAS,GAAG,KAAKS,MAAL,CAAYO,IAAZ,CAAiB,4FAAjB,EAAwC;AACtDlD,gBAAI,EAAE;AAAEyB,yBAAW,EAAEwB;AAAf;AADgD,WAAxC,CAAhB;AAGD;;;;;;;uBA/BUY,e,EAAe,+I,EAAA,2H,EAAA,mI;AAAA,K;;;YAAfA,e;AAAe,iC;AAAA;AAAA;0EACf,8D,EAAS,I;;0EACT,wE,EAAc,I;;;;;;;;;;;;;;;AChB3B;;AAA2B;;AAAM;;AACjC;;AACI;;AACI;;AAAW;;AAAa;;AACxB;;AACJ;;AACA;;AACI;;AAAW;;AAAiB;;AAC5B;;AAEA;;AACA;;AACJ;;AACA;;AACI;;AAAW;;AAAe;;AAC1B;;AAEA;;AACA;;AACJ;;AACA;;AACI;;AAAsB;AAAA,mBAAS,IAAAhC,QAAA,EAAT;AAAmB,WAAnB;;AAAuD;;AAAM;;AACvF;;AACJ;;AACA;;AACK;;AACG;;AACI;;AAEI;;AACI;;AACA;;AACJ;;AAEA;;AACI;;AACA;;AACJ;;AAEA;;AACI;;AACA;;AACJ;;AAEA;;AACI;;AACA;;AACJ;;AAEA;;AACI;;AACA;;AAGJ;;AAEA;;AACA;;AACJ;;AAEA;;AACJ;;AACJ;;;;;;;;AA7DE;;AAAA;;AAO6D;;AAAA;;AAE1B;;AAAA;;AAKwB;;AAAA;;AAExB;;AAAA;;AAUZ;;AAAA;;AA6BM;;AAAA;;AACP;;AAAA;;AAGD;;AAAA;;;;;;;;;sED9CdgC,e,EAAe;cAL3B,uDAK2B;eALjB;AACTlH,kBAAQ,EAAE,YADD;AAETC,qBAAW,EAAE,yBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKiB,Q;;;;;;;;;;gBACzB,uD;iBAAU,8D,EAAS;AAAE,sBAAQ;AAAV,W;;;gBACnB,uD;iBAAU,wE,EAAc;AAAC,sBAAQ;AAAT,W;;;;;;;;;;;;;;;;;;;;AEhB3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAUaoH,iB;AAEX;AACA,iCAAoBC,IAApB,EAAsC;AAAA;;AAAlB,aAAAA,IAAA,GAAAA,IAAA;AAFpB,aAAAC,GAAA,GAAM,uBAAN;AAEyC;;;;6CAEpB;AACnB,iBAAO,KAAKD,IAAL,CAAUzD,GAAV,CAA8B,KAAK0D,GAAL,GAAW,+BAAzC,CAAP;AACD;;;yCACgB;AACf,iBAAO,KAAKD,IAAL,CAAUzD,GAAV,CAA0B,KAAK0D,GAAL,GAAW,2BAArC,CAAP;AACD;;;4CACmB;AAClB,iBAAO,KAAKD,IAAL,CAAUzD,GAAV,CAA6B,KAAK0D,GAAL,GAAW,8BAAxC,CAAP;AACD;;;0CACiBnE,I,EAAM;AACtB,iBAAO,KAAKkE,IAAL,CAAUE,IAAV,CAA4B,KAAKD,GAAL,GAAW,8BAAvC,EAAuEnE,IAAvE,CAAP;AACD;;;6CACoB;AACnB,iBAAO,KAAKkE,IAAL,CAAUzD,GAAV,CAA6B,KAAK0D,GAAL,GAAW,oCAAxC,CAAP;AACD;;;6CACoBnE,I,EAAM;AACzB,iBAAO,KAAKkE,IAAL,CAAUG,GAAV,CAA2B,KAAKF,GAAL,GAAW,0BAAtC,EAAkEnE,IAAlE,CAAP;AACD;;;2CACkB;AACjB,iBAAO,KAAKkE,IAAL,CAAUzD,GAAV,CAA6B,KAAK0D,GAAL,GAAW,6BAAxC,CAAP;AACD;;;0CACiBnE,I,EAAI;AACpBM,iBAAO,CAACC,GAAR,CAAY,iBAAZ,EAA8BP,IAA9B;AACA,iBAAO,KAAKkE,IAAL,CAAUG,GAAV,CAA2B,KAAKF,GAAL,GAAU,8BAArC,EAAqEnE,IAArE,CAAP;AACD;;;yCACa;AACZ,iBAAO,KAAKkE,IAAL,CAAUzD,GAAV,CAAsB,KAAK0D,GAAL,GAAW,2BAAjC,CAAP;AACD;;;2CACe;AACd,iBAAO,KAAKD,IAAL,CAAUzD,GAAV,CAAsB,KAAK0D,GAAL,GAAW,6BAAjC,CAAP;AACD;;;+BACMnE,I,EAAI;AACT,iBAAO,KAAKkE,IAAL,CAAUI,KAAV,CAA+B,KAAKH,GAAL,GAAW,mBAA1C,EAA+DnE,IAA/D,CAAP;AACD;;;;;;;uBAtCUiE,iB,EAAiB,uH;AAAA,K;;;aAAjBA,iB;AAAiB,eAAjBA,iBAAiB,K;AAAA,kBAFhB;;;;;sEAEDA,iB,EAAiB;cAH7B,wDAG6B;eAHlB;AACVnI,oBAAU,EAAE;AADF,S;AAGkB,Q;;;;;;;;;;;;;;;;;;;;;;ACV9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOayI,Y;AAGX,4BAAoBlH,OAApB,EAA+C;AAAA;;AAA3B,aAAAA,OAAA,GAAAA,OAAA;AAClB,aAAKmH,QAAL,GAAgB,IAAI,oDAAJ,CAA4B,CAA5B,CAAhB;AACA,aAAKC,MAAL,GAAc,IAAI,oDAAJ,CAA4B,CAA5B,CAAd;AACD;;;;2CACe;AACd,iBAAO,KAAKD,QAAL,CAAcE,YAAd,EAAP;AACD;;;yCACgB1E,I,EAAI;AACnB,eAAKwE,QAAL,CAAcG,IAAd,CAAmB3E,IAAnB;AACD;;;yCAEa;AACZ,iBAAO,KAAKyE,MAAL,CAAYC,YAAZ,EAAP;AACD;;;uCACc1E,I,EAAI;AACjB,eAAKyE,MAAL,CAAYE,IAAZ,CAAiB3E,IAAjB;AACD;;;;;;;uBAnBUuE,Y,EAAY,8H;AAAA,K;;;aAAZA,Y;AAAY,eAAZA,YAAY,K;AAAA,kBAFX;;;;;sEAEDA,Y,EAAY;cAHxB,wDAGwB;eAHb;AACVzI,oBAAU,EAAE;AADF,S;AAGa,Q;;;;;;;;;;;;;;;;;;;;;;ACPzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACeY;;AAA2C;;AAAqB;;;;;;AAFpE;;AAEI;;AACJ;;;;;;AADW;;AAAA;;;;;;AASP;;AAA4C;;AAAsB;;;;;;AAFtE;;AAEI;;AACJ;;;;;;AADW;;AAAA;;;;;;AASP;;AAA0C;;AAAoB;;;;;;AAFlE;;AAEI;;AACJ;;;;;;AADW;;AAAA;;;;;;AAOP;;AAA4D;;AAAO;;;;;;AAArB;;AAAc;;AAAA;;;;;;AAG5D;;AAAwC;;AAAkB;;;;;;AAD9D;;AACI;;AACJ;;;;;;AADW;;AAAA;;;;;;AAOP;;AAAqC;;AAAe;;;;;;AACpD;;AAAoC;;AAA0B;;;;;;AAFlE;;AACI;;AACA;;AAEJ;;;;;;AAHW;;AAAA;;AACA;;AAAA;;;;;;AAYP;;AAAuD;;AAAkC;;;;;;AAH7F;;AAGI;;AACJ;;;;;;AADW;;AAAA;;;;;;AASP;;AAAgD;;AAA2B;;;;;;AAF/E;;AAEI;;AACJ;;;;;;AADW;;AAAA;;;;;;AAUP;;AAAkD;;AAA6B;;;;;;AAFnF;;AAEI;;AACJ;;;;;;AADW;;AAAA;;;;;;AAUP;;AACI;;AACJ;;;;;;AAF8D;;AAC1D;;AAAA;;;;;;AAKJ;;AAA6C;;AAAwB;;;;;;AAFzE;;AAEI;;AACJ;;;;;;AADW;;AAAA;;;;;;AAOP;;AACI;;AACJ;;;;;;AAF2C;;AACvC;;AAAA;;;;;;AAKJ;;AAA0C;;AAAqB;;;;;;AAFnE;;AAEI;;AACJ;;;;;;AADW;;AAAA;;;;;;AAWP;;AAAkD;;AAA6B;;;;;;AADnF;;AACI;;AACJ;;;;;;AADW;;AAAA;;;;;;AAUP;;AAA6C;;AAAuB;;;;;;AAFxE;;AAEI;;AACJ;;;;;;AADW;;AAAA;;;;;;AAOP;;AACI;;AACJ;;;;;;AAF+C;;AAC3C;;AAAA;;;;;;AAWJ;;AAAwC;;AAAkB;;;;;;AAF9D;;AAEI;;AACJ;;;;;;AADW;;AAAA;;;;QDvIN8I,sB;AAEX,sCAAoBxH,EAApB,EAA4C8E,SAA5C,EACkClC,IADlC,EACqD3C,OADrD,EACiF;AAAA;;AAD7D,aAAAD,EAAA,GAAAA,EAAA;AAAwB,aAAA8E,SAAA,GAAAA,SAAA;AACV,aAAAlC,IAAA,GAAAA,IAAA;AAAmB,aAAA3C,OAAA,GAAAA,OAAA;AAIrD,aAAAE,OAAA,GAAoB,IAAIC,KAAJ,EAApB;AACA,aAAAyC,aAAA,GAA0B,IAAIzC,KAAJ,EAA1B;AACA,aAAA2C,YAAA,GAAyB,IAAI3C,KAAJ,EAAzB;AACA,aAAA6C,SAAA,GAAsB,IAAI7C,KAAJ,EAAtB;AACA,aAAAC,QAAA,GAAW,CAAX;AARoF;;;;mCAa5E;AAAA;;AACN,eAAKC,YAAL,GAAoB,KAAKN,EAAL,CAAQO,KAAR,CAAc;AAChCC,sBAAU,EAAE,CAAC;AAAEE,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,CADoB;AAEhCF,qBAAS,EAAE,CAAC;AAAEC,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,CAFqB;AAGhCC,uBAAW,EAAE,CAAC;AAAEF,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,EAAgC,0DAAWE,QAA3C,CAHmB;AAIhCC,wBAAY,EAAE,CAAC;AAAEJ,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,CAJkB;AAKhCI,kBAAM,EAAE,CAAC;AAAEL,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,EAAgC,CAAC,0DAAWE,QAAZ,CAAhC;AALwB,WAAd,CAApB;AAQA,eAAKG,YAAL,GAAoB,KAAKhB,EAAL,CAAQO,KAAR,CAAc;AAChCU,sBAAU,EAAE,CAAC;AAAEP,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,CADoB;AAEhCF,qBAAS,EAAE,CAAC;AAAEC,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,EAAgC,CAAC,0DAAWE,QAAZ,CAAhC,CAFqB;AAGhCK,sBAAU,EAAE,CAAC;AAAER,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,CAHoB;AAIhCQ,oBAAQ,EAAE,CAAC;AAAET,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,CAJsB;AAKhCS,oBAAQ,EAAE,KAAKd,YALiB;AAMhCe,kBAAM,EAAE,CAAC;AAAEX,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,EAAgC,0DAAWE,QAA3C,CANwB;AAOhCS,eAAG,EAAE,CAAC;AAAEZ,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,EAAgC,CAAC,0DAAWE,QAAZ,EAAsB,0DAAWU,OAAX,CAAmB,YAAnB,CAAtB,CAAhC,CAP2B;AAQhCC,iCAAqB,EAAE,CAAC;AAAEd,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,EAAgC,0DAAWE,QAA3C,CARS;AAShCY,0BAAc,EAAE,CAAC;AAAEf,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,EAAgC,0DAAWE,QAA3C,CATgB;AAUhCa,4BAAgB,EAAE,CAAC;AAAEhB,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,EAAgC,0DAAWE,QAA3C;AAVc,WAAd,CAApB;AAaA,eAAKc,eAAL,GAAuB,KAAK3B,EAAL,CAAQO,KAAR,CAAc;AACnCuB,uBAAW,EAAE,CAAC;AAAEpB,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,EAAgC,CAAC,0DAAWE,QAAZ,CAAhC,CADsB;AAEnCe,yBAAa,EAAE,CAAC;AAAElB,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,CAFoB;AAGnCkB,oBAAQ,EAAE,KAAKb,YAHoB;AAInCe,oBAAQ,EAAE,CAAC;AAAErB,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,EAAgC,CAAC,0DAAWE,QAAZ,CAAhC,CAJyB;AAKnCmB,4BAAgB,EAAE,CAAC;AAAEtB,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,EAAgC,0DAAWE,QAA3C,CALiB;AAMnCoB,sBAAU,EAAE,CAAC;AAAEvB,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,CANuB;AAOnCuB,sBAAU,EAAE,CAAC;AAAExB,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,CAPuB;AAQnCwB,4BAAgB,EAAE,CAAC;AAAEzB,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,CARiB;AASnCyB,4BAAgB,EAAE,CAAC;AAAE1B,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD,CATiB;AAUnC0B,kBAAM,EAAE,CAAC;AAAE3B,mBAAK,EAAE,EAAT;AAAaC,sBAAQ,EAAE;AAAvB,aAAD;AAV2B,WAAd,CAAvB;AAaA,eAAKgB,eAAL,CAAqB0B,GAArB,CAAyB,eAAzB;;AACA,eAAK,IAAIf,IAAT,IAAiB,2DAAjB,EAAyB;AACvB,gBAAIC,KAAK,CAACC,MAAM,CAACF,IAAD,CAAP,CAAT,EAAyB;AACvB,mBAAKnC,OAAL,CAAasC,IAAb,CAAkBH,IAAlB;AACD;AACF;;AAED,eAAKrC,OAAL,CAAayC,kBAAb,GAAkCC,SAAlC,CAA4C,UAAAC,IAAI,EAAI;AAClDA,gBAAI,CAACmC,OAAL,CAAa,UAAAC,EAAE,EAAI;AACjB,oBAAI,CAACnC,aAAL,CAAmBJ,IAAnB,CAAwBuC,EAAE,CAACC,gBAA3B;AACD,aAFD;AAGD,WAJD;AAMA,eAAKhF,OAAL,CAAa6C,iBAAb,GAAiCH,SAAjC,CAA2C,UAAAC,IAAI,EAAI;AACjDM,mBAAO,CAACC,GAAR,CAAYP,IAAZ;AACAA,gBAAI,CAACmC,OAAL,CAAa,UAAAC,EAAE,EAAI;AACjB9B,qBAAO,CAACC,GAAR,CAAY6B,EAAZ;;AACA,oBAAI,CAACjC,YAAL,CAAkBN,IAAlB,CAAuBuC,EAAE,CAACE,eAA1B;AACD,aAHD;AAID,WAND;AAQA,eAAKjF,OAAL,CAAa+C,cAAb,GAA8BL,SAA9B,CAAwC,UAAAC,IAAI,EAAI;AAC9CA,gBAAI,CAACmC,OAAL,CAAa,UAAAC,EAAE,EAAI;AACjB,oBAAI,CAAC/B,SAAL,CAAeR,IAAf,CAAoBuC,EAAE,CAACG,YAAvB;AACD,aAFD;AAID,WALD;AAQA,cAAMd,WAAW,GAAG,KAAKzB,IAAL,CAAUyB,WAA9B;AACAnB,iBAAO,CAACC,GAAR,CAAYkB,WAAZ;AACAA,qBAAW,CAACrC,gBAAZ,GAA+BqC,WAAW,CAACrC,gBAAZ,CAA6BoD,QAA7B,EAA/B;AACA,eAAKzD,eAAL,CAAqB2B,QAArB,CAA8Be,WAA9B;AACA,eAAK1C,eAAL,CAAqB0B,GAArB,CAAyB,aAAzB,EAAwCC,QAAxC,CAAiD,KAAK3B,eAAL,CAAqB0B,GAArB,CAAyB,aAAzB,EAAwC3C,KAAxC,CAA8CwE,eAA/F;AACA,eAAKvD,eAAL,CAAqB0B,GAArB,CAAyB,UAAzB,EAAqCC,QAArC,CAA8C,KAAK3B,eAAL,CAAqB0B,GAArB,CAAyB,UAAzB,EAAqC3C,KAArC,CAA2CyE,YAAzF;AACA,eAAK7E,YAAL,CAAkB+C,GAAlB,CAAsB,cAAtB,EAAsCC,QAAtC,CAA+C,KAAKhD,YAAL,CAAkB+C,GAAlB,CAAsB,cAAtB,EAAsC3C,KAAtC,CAA4CuE,gBAA3F;AAEA/B,iBAAO,CAACC,GAAR;AACAD,iBAAO,CAACC,GAAR,CAAYkB,WAAW,CAACvC,WAAxB;AAED;;;uCA2Cc0B,K,EAAO;AACpB,eAAKnD,QAAL,GAAgBmD,KAAK,CAACC,MAAN,CAAa/C,KAA7B;AACD;;;kCACS;AACR,eAAKiB,eAAL,CAAqB0B,GAArB,CAAyB,QAAzB,EAAmCC,QAAnC,CAA4C,4DAAO+C,OAAnD;AACA,eAAKvB,SAAL,CAAeO,KAAf,CAAqB,KAAK1D,eAAL,CAAqBjB,KAA1C;AACD;;;iCACQ;AACP,eAAKiB,eAAL,CAAqB0B,GAArB,CAAyB,QAAzB,EAAmCC,QAAnC,CAA4C,4DAAOgD,MAAnD;AACA,eAAKxB,SAAL,CAAeO,KAAf,CAAqB,KAAK1D,eAAL,CAAqBjB,KAA1C;AACD;;;iCACQ;AACP,eAAKiB,eAAL,CAAqB0B,GAArB,CAAyB,QAAzB,EAAmCC,QAAnC,CAA4C,4DAAOiD,MAAnD;AACA,eAAKzB,SAAL,CAAeO,KAAf,CAAqB,KAAK1D,eAAL,CAAqBjB,KAA1C;AACD;;;iCACQ;AACP,eAAKiB,eAAL,CAAqB0B,GAArB,CAAyB,QAAzB,EAAmCC,QAAnC,CAA4C,4DAAOkD,MAAnD;AACA,eAAK1B,SAAL,CAAeO,KAAf,CAAqB,KAAK1D,eAAL,CAAqBjB,KAA1C;AACD;;;8BACK+G,K,EAAOC,O,EAAsB;AACjC,iBAAOA,OAAO,CAACC,aAAf;AACD;;;4BA/De;AACd,iBAAO,KAAK3G,YAAL,CAAkBqC,GAAlB,CAAsB,WAAtB,CAAP;AACD;;;4BAEgB;AACf,iBAAO,KAAKrC,YAAL,CAAkBqC,GAAlB,CAAsB,YAAtB,CAAP;AACD;;;4BAEc;AACb,iBAAO,KAAKrC,YAAL,CAAkBqC,GAAlB,CAAsB,UAAtB,CAAP;AACD;;;4BACY;AACX,iBAAO,KAAKrC,YAAL,CAAkBqC,GAAlB,CAAsB,QAAtB,CAAP;AACD;;;4BAC2B;AAC1B,iBAAO,KAAKrC,YAAL,CAAkBqC,GAAlB,CAAsB,uBAAtB,CAAP;AACD;;;4BACoB;AACnB,iBAAO,KAAKrC,YAAL,CAAkBqC,GAAlB,CAAsB,gBAAtB,CAAP;AACD;;;4BACsB;AACrB,iBAAO,KAAKrC,YAAL,CAAkBqC,GAAlB,CAAsB,kBAAtB,CAAP;AACD;;;4BACiB;AAChB,iBAAO,KAAK/C,YAAL,CAAkB+C,GAAlB,CAAsB,aAAtB,CAAP;AACD;;;4BACY;AACX,iBAAO,KAAK/C,YAAL,CAAkB+C,GAAlB,CAAsB,QAAtB,CAAP;AACD;;;4BACS;AACR,iBAAO,KAAKrC,YAAL,CAAkBqC,GAAlB,CAAsB,KAAtB,CAAP;AACD;;;4BACiB;AAChB,iBAAO,KAAK1B,eAAL,CAAqB0B,GAArB,CAAyB,aAAzB,CAAP;AACD;;;4BACc;AACb,iBAAO,KAAK1B,eAAL,CAAqB0B,GAArB,CAAyB,UAAzB,CAAP;AACD;;;4BACsB;AACrB,iBAAO,KAAK1B,eAAL,CAAqB0B,GAArB,CAAyB,kBAAzB,CAAP;AACD;;;;;;;uBApIUmE,sB,EAAsB,2H,EAAA,sI,EAAA,gEAGvB,wEAHuB,C,EAGR,+I;AAAA,K;;;YAHdA,sB;AAAsB,yC;AAAA,e;AAAA,c;AAAA,w4D;AAAA;AAAA;AChBnC;;AAAqB;;AAAiB;;AACtC;;AAEA;;AACI;;AACI;;AAAW;;AAAc;;AACzB;;AACJ;;AAEJ;;AACI;;AACI;;AAAW;;AAAS;;AACpB;;AACA;;AAIJ;;AAEA;;AACI;;AAAW;;AAAU;;AACrB;;AACA;;AAIJ;;AAEA;;AACI;;AAAW;;AAAQ;;AACnB;;AACA;;AAIJ;;AAEA;;AACI;;AAAO;;AAAQ;;AACf;;AACI;;AACJ;;AACA;;AAGJ;;AACA;;AACI;;AAAW;;AAAG;;AACd;;AACA;;AAKJ;;AAEA;;AACI;;AAAW;;AAAsB;;AACjC;;AAEA;;AAKJ;;AAEA;;AACI;;AAAW;;AAAgB;;AAC3B;;AACA;;AAIJ;;AAEA;;AACI;;AAAW;;AAAiB;;AAC5B;;AAEA;;AAIJ;;AACJ;;AAII;;AACI;;AAAW;;AAAY;;AACvB;;AACI;;AAGJ;;AACA;;AAIJ;;AAEA;;AACI;;AAAW;;AAAS;;AACpB;;AACI;;AAGJ;;AACA;;AAIJ;;AAEA;;AACI;;AAAO;;AAAmB;;AAC1B;;AACI;;AAA+B;;AAAG;;AAClC;;AAAgC;;AAAE;;AACtC;;AACA;;AAGJ;;AACJ;;AAEI;;AACI;;AAAW;;AAAW;;AACtB;;AACA;;AAIJ;;AAEA;;AACI;;AAAW;;AAAa;;AACxB;;AACI;;AAGJ;;AACJ;;AAEA;;AACI;;AAAW;;AAAM;;AACjB;;AAC8C;AAAA,mBAAQ,IAAA7C,cAAA,QAAR;AAA8B,WAA9B;;AAD9C;;AAEA;;AAIJ;;AAEJ;;AACA;;AACA;;AACA;;AACI;;AAA0C;AAAA,mBAAQ,IAAAiD,OAAA,EAAR;AAAiB,WAAjB;;AAAkB;;AAAO;;AACnE;;AAA0C;AAAA,mBAAQ,IAAAP,MAAA,EAAR;AAAgB,WAAhB;;AAAiB;;AAAM;;AACjE;;AAA0C;AAAA,mBAAQ,IAAAQ,MAAA,EAAR;AAAgB,WAAhB;;AAAiB;;AAAM;;AACjE;;AAA0C;AAAA,mBAAQ,IAAAC,MAAA,EAAR;AAAgB,WAAhB;;AAAiB;;AAAM;;AAEnE;;;;AAjKI;;AAAA;;AAMD;;AAAA;;AAIoC;;AAAA;;AASA;;AAAA;;AASA;;AAAA;;AASX;;AAAA;;AAEjB;;AAAA;;AAO4B;;AAAA;;AAY7B;;AAAA;;AAS6B;;AAAA;;AAW7B;;AAAA;;AAWY;;AAAA,gGAAiD,cAAjD,EAAiD,SAAjD;;AAIiB;;AAAA;;AASjB;;AAAA;;AAIiB;;AAAA;;AAY5B;;AAAA;;AAIR;;AAAA;;AAKoC;;AAAA;;AASjB;;AAAA;;AAQuD;;AAAA,2FAAuB,cAAvB,EAAuB,KAAvB,EAAuB,OAAvB,EAAuB,YAAvB;;AAEtC;;AAAA;;;;;;;;;sEDrI5BN,sB,EAAsB;cALlC,uDAKkC;eALxB;AACTjI,kBAAQ,EAAE,oBADD;AAETC,qBAAW,EAAE,iCAFJ;AAGTC,mBAAS,EAAE,CAAC,gCAAD;AAHF,S;AAKwB,Q;;;;;;;;kBAG9B,oD;mBAAO,wE;;;;;;;;;;;;;;;;;;;;;;;AEnBZ;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACEA;;;;;;AAOQ;;AAAuC;;AAAe;;;;;;AACtD;;AAAwC;;AAA0B;;;;;;AAA1B;;AAAA;;;;;;AAKxC;;AAAuC;;AAAU;;;;;;AACjD;;AAAwC;;AAA+B;;;;;;AAA/B;;AAAA;;;;;;AAKxC;;AAAuC;;AAAa;;;;;;AACpD;;AAAwC;;AAAwC;;;;;;AAAxC;;AAAA;;;;;;AAKxC;;AAAuC;;AAAO;;;;;;AAC9C;;AAAwC;;AAAmB;;;;;;AAAnB;;AAAA;;;;;;AAIxC;;AAAuD;;AAAK;;;;;;;;AAC5D;;AACI;;AAAU;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAA+B;;AAAW;;AACxD;;;;;;AAGF;;;;;;AACA;;;;;;;;QDzBOsI,gB;AASX,gCAAoB7H,KAApB,EAAiDD,OAAjD,EAAoFsF,MAApF,EAAuG;AAAA;;AAAnF,aAAArF,KAAA,GAAAA,KAAA;AAA6B,aAAAD,OAAA,GAAAA,OAAA;AAAmC,aAAAsF,MAAA,GAAAA,MAAA;AAFpF,aAAAC,gBAAA,GAAmB,CAAC,eAAD,EAAkB,oBAAlB,EAAwC,aAAxC,EAAuD,QAAvD,EAAiE,MAAjE,CAAnB;AAE0G;;;;mCAE/F;AAAA;;AACT,eAAKvF,OAAL,CAAa+H,kBAAb,GAAkCrF,SAAlC,CAA4C,UAACC,IAAD,EAAU;AACpD,kBAAI,CAAC8C,UAAL,GAAkB,IAAI,0EAAJ,CAAuB9C,IAAvB,CAAlB;AACA,kBAAI,CAAC8C,UAAL,CAAgBC,IAAhB,GAAuB,MAAI,CAACA,IAA5B;AACA,kBAAI,CAACD,UAAL,CAAgBE,SAAhB,GAA4B,MAAI,CAACA,SAAjC;AAED,WALD;AAOD;;;mCAEUC,O,EAAS;AAAA;;AAClB,cAAIf,SAAS,GAAG,KAAKS,MAAL,CAAYO,IAAZ,CAAiB,+FAAjB,EAAyC;AACvDlD,gBAAI,EAAE;AAAEyB,yBAAW,EAAEwB;AAAf;AADiD,WAAzC,CAAhB;AAIAf,mBAAS,CAACiB,WAAV,GAAwBpD,SAAxB,CAAkC,UAAAC,IAAI,EAAI;AACxC,mBAAI,CAACoD,WAAL,GAAmB,IAAnB;AACA9C,mBAAO,CAACC,GAAR,CAAYP,IAAZ;;AACA,mBAAI,CAAC3C,OAAL,CAAagI,oBAAb,CAAkCrF,IAAlC,EAAwCD,SAAxC,CAAkD,UAACuD,QAAD,EAAc;AAC9D,qBAAI,CAACjG,OAAL,CAAagE,gBAAb,GAAgCtB,SAAhC,CAA0C,UAAAC,IAAI,EAAE;AAC9C,uBAAI,CAAC3C,OAAL,CAAa+D,cAAb,GAA8BrB,SAA9B,CAAwC,UAAAuB,KAAK,EAAE;AAC7C,yBAAI,CAAChE,KAAL,CAAWiE,gBAAX,CAA4BvB,IAA5B;;AACA,yBAAI,CAAC1C,KAAL,CAAWkE,cAAX,CAA0BF,KAA1B;;AACY,yBAAI,CAAC8B,WAAL,GAAmB,KAAnB;AACZ9C,yBAAO,CAACC,GAAR,CAAY+C,QAAZ;;AACA,yBAAI,CAACC,QAAL;AACD,iBAND;AAOD,eARD;AAWD,aAZD;AAaD,WAhBD;AAiBD;;;;;;;uBA3CU4B,gB,EAAgB,oI,EAAA,+I,EAAA,mI;AAAA,K;;;YAAhBA,gB;AAAgB,kC;AAAA;AAAA;0EAIhB,8D,EAAS,I;;0EACT,wE,EAAc,I;;;;;;;;;;;;;;;ACnB3B;;AAA2B;;AAAiB;;AAC5C;;AACA;;AACA;;AACA;;AACI;;AAGE;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAGA;;AACE;;AACA;;AACF;;AAEA;;AACE;;AACA;;AAGJ;;AAEE;;AACA;;AACF;;AAEA;;AACF;;AACF;;;;AA1Ca;;AAAA;;AAGS;;AAAA;;AAiCG;;AAAA;;AACP;;AAAA;;AAGC;;AAAA;;;;;;;;;sED5BNA,gB,EAAgB;cAL5B,uDAK4B;eALlB;AACTxI,kBAAQ,EAAE,aADD;AAETC,qBAAW,EAAE,0BAFJ;AAGTC,mBAAS,EAAE,CAAC,yBAAD;AAHF,S;AAKkB,Q;;;;;;;;;;gBAI1B,uD;iBAAU,8D,EAAS;AAAE,sBAAQ;AAAV,W;;;gBACnB,uD;iBAAU,wE,EAAc;AAAC,sBAAQ;AAAT,W;;;;;;;;;;;;;;;;;;;;AEnB3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOayI,e;AAEX,iCAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,e;AAAe,K;;;YAAfA,e;AAAe,iC;AAAA,c;AAAA,a;AAAA,mD;AAAA;AAAA;ACP5B;;AACI;;AACI;;AAAS;;AAAW;;AACrB;;AACP;;;;;;;;;sEDGaA,e,EAAe;cAL3B,uDAK2B;eALjB;AACT3I,kBAAQ,EAAE,YADD;AAETC,qBAAW,EAAE,yBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKiB,Q;;;;;;;;;;;;;;;;;;;;AEP5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQa0I,e;AAEX,+BAAoB9J,KAApB,EAAkC;AAAA;;AAAd,aAAAA,KAAA,GAAAA,KAAA;AAAiB;;;;mCAG7B;AACN,eAAK+J,QAAL,GAAc7J,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAd;AACA,eAAK6J,KAAL,GAAY9J,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;AACD;;;iCACK;AACJD,sBAAY,CAAC+J,KAAb;AACJ,eAAKjK,KAAL,CAAWI,QAAX,CAAoB,CAAC,OAAD,CAApB;AACG;;;;;;;uBAZU0J,e,EAAe,uH;AAAA,K;;;YAAfA,e;AAAe,iC;AAAA,e;AAAA,a;AAAA,4O;AAAA;AAAA;ACR5B;;AACI;;AACI;;AAAU;;AAAe;;AAC7B;;AACA;;AAAM;;AAA2B;;AACjC;;AACA;;AAA6B;;AAAO;;AAAG;;AAAK;;AAAK;;AAAY;;AAAQ;;AAAI;;AAAO;;AAAG;;AAAM;;AAAK;;AAAS;;AACnG;;AACJ;;AACA;;AAAuC;AAAA,mBAAQ,IAAAI,MAAA,EAAR;AAAgB,WAAhB;;AAAiB;;AAAQ;;AAEpE;;;;AALqD;;AAAA;;AAA6C;;AAAA;;;;;;;;;sEDErFJ,e,EAAe;cAL3B,uDAK2B;eALjB;AACT5I,kBAAQ,EAAE,YADD;AAETC,qBAAW,EAAE,yBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKiB,Q;;;;;;;;;;;;;;;;;;;;;;AER5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOa+I,a;AAEX,+BAAc;AAAA;AAAG;;;;mCAET,CACP;;;;;;;uBALUA,a;AAAa,K;;;YAAbA,a;AAAa,+B;AAAA,c;AAAA,a;AAAA,mI;AAAA;AAAA;ACN1B;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAHa;;AAAA;;;;;;;;;sEDEAA,a,EAAa;cALzB,uDAKyB;eALf;AACTjJ,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,uBAFJ;AAGTC,mBAAS,EAAE,CAAC,sBAAD;AAHF,S;AAKe,Q;;;;;;;;;;;;;;;;;;;;AEP1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACCI;;AACI;;AACI;;AAA+D;;AAAG;;AACnD;;AAAI;;AACvB;;AACA;;AACJ;;;;;;AACA;;AACI;;AACI;;AAA+D;;AAAG;;AAAyI;;AAAM;;AAAO;;AAAI;;AAChO;;AACA;;AACJ;;;;;;AAHwG;;AAAA;;AAAmD;;;;;;AAI3J;;AACI;;AACI;;AAAiE;;AAAG;;AAA6I;;AAAM;;AAAO;;AAAI;;AACtO;;AACA;;AACJ;;;;;;AAH0G;;AAAA;;AAAqD;;;;;;AAI/J;;AACI;;AACI;;AAA8D;;AAAG;;AAAM;;AAAI;;AAC/E;;AACJ;;;;QDfSgJ,a;AAEX,6BAAoBvI,KAApB,EAAiDD,OAAjD,EAA6E;AAAA;;AAAzD,aAAAC,KAAA,GAAAA,KAAA;AAA6B,aAAAD,OAAA,GAAAA,OAAA;AAGjD,aAAAyI,aAAA,GAAwB,CAAxB;AACA,aAAAC,WAAA,GAAsB,CAAtB;AAJgF;;;;mCAKxE;AAAA;;AACN,eAAKN,KAAL,GAAa9J,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAb;AACA,eAAKoK,IAAL,GAAY,KAAKP,KAAL,CAAWQ,KAAX,CAAiB,GAAjB,CAAZ;;AACA,cAAI,KAAKF,WAAL,IAAoB,IAApB,IAA4B,KAAKD,aAAL,IAAsB,IAAtD,EAA4D;AAC1D,iBAAKzI,OAAL,CAAagE,gBAAb,GAAgCtB,SAAhC,CAA0C,UAAAC,IAAI,EAAI;AAChD,qBAAI,CAAC3C,OAAL,CAAa+D,cAAb,GAA8BrB,SAA9B,CAAwC,UAAAuB,KAAK,EAAI;AAC/C,uBAAI,CAAChE,KAAL,CAAWiE,gBAAX,CAA4BvB,IAA5B;;AACA,uBAAI,CAAC1C,KAAL,CAAWkE,cAAX,CAA0BF,KAA1B;AACD,eAHD;AAID,aALD;AAMD;;AACD,eAAKhE,KAAL,CAAW4I,gBAAX,GAA8BnG,SAA9B,CAAwC,UAAAoG,EAAE,EAAI;AAC5C,mBAAI,CAACL,aAAL,GAAqBK,EAArB;AACA7F,mBAAO,CAACC,GAAR,CAAY,cAAZ,EAA4B,OAAI,CAACuF,aAAjC;AACD,WAHD;AAIA,eAAKxI,KAAL,CAAW8I,cAAX,GAA4BrG,SAA5B,CAAsC,UAAAoG,EAAE,EAAI;AAC1C,mBAAI,CAACJ,WAAL,GAAmBI,EAAnB;AACA7F,mBAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B,OAAI,CAACwF,WAAhC;AACD,WAHD;AAID;;;;;;;uBA1BUF,a,EAAa,yI,EAAA,oJ;AAAA,K;;;YAAbA,a;AAAa,+B;AAAA,c;AAAA,a;AAAA,+Z;AAAA;AAAA;ACT1B;;AACI;;AAOA;;AAMA;;AAMA;;AAKJ;;;;AAxBS;;AAAA;;AAOA;;AAAA;;AAMA;;AAAA;;AAMA;;AAAA;;;;;;;;;sEDXIA,a,EAAa;cALzB,uDAKyB;eALf;AACTlJ,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,uBAFJ;AAGTC,mBAAS,EAAE,CAAC,sBAAD;AAHF,S;AAKe,Q;;;;;;;;;;;;;;;;;;;;;;;;AET1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQawJ,kB;AAEX,oCAAc;AAAA;AAAG;;;;kCACPC,O,EAA2B3B,I,EAAmB;AACtD,cAAMjJ,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,cAAIf,GAAJ;AACAyF,iBAAO,CAACC,GAAR,CAAY7E,KAAZ;;AACA,cAAIA,KAAJ,EAAW;AACTb,eAAG,GAAGyL,OAAO,CAACC,KAAR,CAAc;AAAEC,qBAAO,EAAEF,OAAO,CAACE,OAAR,CAAgBC,GAAhB,CAAoB,eAApB,EAAqC/K,KAArC;AAAX,aAAd,CAAN;AACD,WAFD,MAGI;AACFb,eAAG,GAAEyL,OAAO,CAACC,KAAR,EAAL;AACD;;AACD,iBAAO5B,IAAI,CAAC+B,MAAL,CAAY7L,GAAZ,CAAP;AACD;;;;;;;uBAdUwL,kB;AAAkB,K;;;aAAlBA,kB;AAAkB;AAAA,eAHnBA,kBAAkB,KAAlB,CAAkB,CAAlB,CAGmB;AAHD,O;AAAA,kBADhB;;;;;sEAIDA,kB,EAAkB;cAL9B,wDAK8B;eALnB;AACVvK,oBAAU,EAAE,MADF;AAEV6K,kBAAQ,EAAEN;AAFA,S;AAKmB,Q;;;;;;;;;;;;;;;;;;;;ACR/B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAGO,QAAMO,wBAAwB,GAAG,CACpC;AAAElF,aAAO,EAAE,sEAAX;AAA8BiF,cAAQ,EAAC,uEAAvC;AAA4DE,WAAK,EAAE;AAAnE,KADoC,CAAjC;;;;;;;;;;;;;;;;ACHP;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACewB;;AAA0C;;AAAoB;;;;;;AAC9D;;AAA0C;;AAClC;;;;;;AAJZ;;AAEI;;AACA;;AAEJ;;;;;;AAHW;;AAAA;;AACA;;AAAA;;;;;;AAWP;;AAA0C;;AAAoB;;;;;;AAC9D;;AAA0C;;AAClC;;;;;;AAJZ;;AAEI;;AACA;;AAEJ;;;;;;AAHW;;AAAA;;AACA;;AAAA;;;;;;AAIf;;AAAqC;;AAAmB;;;;QDtB3DC,c;AAEX,8BAAoB1J,EAApB,EAA6CC,OAA7C,EAA4E5B,KAA5E,EAA0F;AAAA;;AAAtE,aAAA2B,EAAA,GAAAA,EAAA;AAAyB,aAAAC,OAAA,GAAAA,OAAA;AAA+B,aAAA5B,KAAA,GAAAA,KAAA;AAC5E,aAAAsL,IAAA,GAAO,KAAP;AAD6F;;;;mCAGrF;AACN,eAAKC,IAAL,GAAY,KAAK5J,EAAL,CAAQO,KAAR,CAAc;AACxB6H,oBAAQ,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWvH,QAAZ,EAAsB,0DAAWgJ,SAAX,CAAqB,CAArB,CAAtB,CAAL,CADc;AAExBC,oBAAQ,EAAE,CAAC,EAAD,EAAK,CAAC,0DAAWjJ,QAAZ,EAAsB,0DAAWgJ,SAAX,CAAqB,CAArB,CAAtB,CAAL;AAFc,WAAd,CAAZ;AAMD;;;gCAOO;AAAA;;AACN3G,iBAAO,CAACC,GAAR,CAAY,KAAKyG,IAAL,CAAUlJ,KAAtB;AACA,eAAKT,OAAL,CAAa8J,KAAb,CAAmB,KAAKH,IAAL,CAAUlJ,KAA7B,EAAoCiC,SAApC,CAA8C,UAAAC,IAAI,EAAI;AACpDrE,wBAAY,CAACyL,OAAb,CAAqB,OAArB,EAA8BpH,IAAI,CAACtE,KAAnC;AACA,gBAAI+J,KAAK,GAAC,EAAV;AACAzF,gBAAI,CAACqH,SAAL,CAAelF,OAAf,CAAuB,UAAA6D,IAAI,EAAE;AAC3B,kBAAGP,KAAK,IAAE,EAAV,EACAA,KAAK,IAAE,GAAP;AACAA,mBAAK,IAAEO,IAAI,CAACqB,SAAZ;AACD,aAJD;AAKA1L,wBAAY,CAACyL,OAAb,CAAqB,UAArB,EAAiC,OAAI,CAAC5B,QAAL,CAAc1H,KAA/C;AACAnC,wBAAY,CAACyL,OAAb,CAAqB,OAArB,EAA6B3B,KAA7B;;AACA,mBAAI,CAAChK,KAAL,CAAWI,QAAX,CAAoB,CAAC,KAAD,CAApB;AACD,WAXD,EAWE,UAAAyL,KAAK,EAAE;AACP,mBAAI,CAACP,IAAL,GAAU,IAAV;AACD,WAbD;AAeD;;;4BAvBc;AACb,iBAAO,KAAKC,IAAL,CAAUvG,GAAV,CAAc,UAAd,CAAP;AACD;;;4BACc;AACb,iBAAO,KAAKuG,IAAL,CAAUvG,GAAV,CAAc,UAAd,CAAP;AACD;;;;;;;uBAlBUqG,c,EAAc,2H,EAAA,oI,EAAA,uH;AAAA,K;;;YAAdA,c;AAAc,gC;AAAA,e;AAAA,a;AAAA,02B;AAAA;AAAA;ACV3B;;AACI;;AACI;;AAEJ;;AACA;;AAEI;;AACI;;AAAkB;;AAAY;;AAC9B;;AACI;;AACI;;AAAW;;AAAQ;;AACnB;;AACA;;AAMJ;;AAEA;;AACI;;AAAW;;AAAQ;;AACnB;;AAEA;;AAMJ;;AACA;;AAEA;;AACI;AAAA,mBAAS,IAAAK,KAAA,EAAT;AAAgB,WAAhB;;AAAkB;;AAAK;;AAE/B;;AACJ;;AAEJ;;AACJ;;;;AAhCkB;;AAAA;;AAImC;;AAAA;;AAYA;;AAAA;;AAOb;;AAAA;;AAE8C;;AAAA;;;;;;;;;sEDxBzEL,c,EAAc;cAL1B,uDAK0B;eALhB;AACTnK,kBAAQ,EAAE,WADD;AAETC,qBAAW,EAAE,wBAFJ;AAGTC,mBAAS,EAAE,CAAC,uBAAD;AAHF,S;AAKgB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AEV3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAQa0K,Y;AAEX;AACA,4BAAoBrD,IAApB,EAAsC;AAAA;;AAAlB,aAAAA,IAAA,GAAAA,IAAA;AAFpB,aAAAC,GAAA,GAAM,uBAAN;AAEyC;;;;8BAEnCqD,W,EAAW;AACflH,iBAAO,CAACC,GAAR,CAAYiH,WAAZ;AACA,iBAAO,KAAKtD,IAAL,CAAUE,IAAV,CAAsB,KAAKD,GAAL,GAAS,QAA/B,EAAyCqD,WAAzC,CAAP;AACD;;;;;;;uBARUD,Y,EAAY,uH;AAAA,K;;;aAAZA,Y;AAAY,eAAZA,YAAY,K;AAAA,kBAFX;;;;;sEAEDA,Y,EAAY;cAHxB,wDAGwB;eAHb;AACVzL,oBAAU,EAAE;AADF,S;AAGa,Q;;;;;;;;;;;;;;;;;;;;;;ACRza2L,c;;;;;YAAAA;;;;yBAAAA,c;AAAc,O;AAAA,gBAtCvB,oFAsCuB,EArCvB,sEAqCuB,EApCvB,mFAoCuB,EAnCvB,wEAmCuB,EAlCvB,qFAkCuB,EAjCvB,oEAiCuB,EAhCvB,4EAgCuB,EA/BvB,sEA+BuB,EA9BvB,0EA8BuB,EA7BvB,iFA6BuB,EA5BvB,yEA4BuB,EA3BvB,2EA2BuB,EA1BvB,+EA0BuB,EAzBvB,8EAyBuB,EAxBvB,qEAwBuB,EAvBvB,uEAuBuB,EAtBvB,qEAsBuB,EArBvB,qEAqBuB,EApBvB,2EAoBuB,EAnBvB,+EAmBuB,EAlBvB,oFAkBuB,EAjBvB,4FAiBuB,EAhBvB,uEAgBuB,EAfvB,uEAeuB,EAdvB,yEAcuB,EAbvB,2EAauB,EAZvB,yEAYuB,EAXvB,oFAWuB,EAVvB,8EAUuB,EATvB,qEASuB,EARvB,uEAQuB,EAPvB,qEAOuB,EANvB,2EAMuB,EALvB,2EAKuB,EAJvB,qEAIuB;;;;0HAAdA,c,EAAc;AAAA,kBAtCvB,oFAsCuB,EArCvB,sEAqCuB,EApCvB,mFAoCuB,EAnCvB,wEAmCuB,EAlCvB,qFAkCuB,EAjCvB,oEAiCuB,EAhCvB,4EAgCuB,EA/BvB,sEA+BuB,EA9BvB,0EA8BuB,EA7BvB,iFA6BuB,EA5BvB,yEA4BuB,EA3BvB,2EA2BuB,EA1BvB,+EA0BuB,EAzBvB,8EAyBuB,EAxBvB,qEAwBuB,EAvBvB,uEAuBuB,EAtBvB,qEAsBuB,EArBvB,qEAqBuB,EApBvB,2EAoBuB,EAnBvB,+EAmBuB,EAlBvB,oFAkBuB,EAjBvB,4FAiBuB,EAhBvB,uEAgBuB,EAfvB,uEAeuB,EAdvB,yEAcuB,EAbvB,2EAauB,EAZvB,yEAYuB,EAXvB,oFAWuB,EAVvB,8EAUuB,EATvB,qEASuB,EARvB,uEAQuB,EAPvB,qEAOuB,EANvB,2EAMuB,EALvB,2EAKuB,EAJvB,qEAIuB;AAAA,O;AAJV,K;;;;;sEAIJA,c,EAAc;cAxC1B,sDAwC0B;eAxCjB;AACRnM,iBAAO,EAAE,CACP,oFADO,EAEP,sEAFO,EAGP,mFAHO,EAIP,wEAJO,EAKP,qFALO,EAMP,oEANO,EAOP,4EAPO,EAQP,sEARO,EASP,0EATO,EAUP,iFAVO,EAWP,yEAXO,EAYP,2EAZO,EAaP,+EAbO,EAcP,8EAdO,EAeP,qEAfO,EAgBP,uEAhBO,EAiBP,qEAjBO,EAkBP,qEAlBO,EAmBP,2EAnBO,EAoBP,+EApBO,EAqBP,oFArBO,EAsBP,4FAtBO,EAuBP,uEAvBO,EAwBP,uEAxBO,EAyBP,yEAzBO,EA0BP,2EA1BO,EA2BP,yEA3BO,EA4BP,oFA5BO,EA6BP,8EA7BO,EA8BP,qEA9BO,EA+BP,uEA/BO,EAgCP,qEAhCO,EAiCP,2EAjCO,EAkCP,2EAlCO,EAmCP,qEAnCO;AADD,S;AAwCiB,Q;;;;;;;;;;;;;;;;;;AC5E3B;AAAA;;;AAAA;AAAA;AAAA;;AAAA,QAAYoM,MAAZ;;AAAA,eAAYA,MAAZ,EAAkB;AACjB;AAAM;AAAQ;AACd,KAFD,EAAYA,MAAM,KAANA,MAAM,MAAlB;;;;;;;;;;;;;;;;;ACAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA,QAAYC,MAAZ;;AAAA,eAAYA,MAAZ,EAAkB;AACd;AAAQ;AAAS;AAAQ;AAAQ;AAAQ;AAC5C,KAFD,EAAYA,MAAM,KAANA,MAAM,MAAlB;;;;;;;;;;;;;;;;;ACAA;AAAA;;;AAAA;AAAA;AAAA,O,CAAA;AACA;AACA;;;AAEO,QAAMC,WAAW,GAAG;AACzBC,gBAAU,EAAE;AADa,KAApB;AAIP;;;;;;;AAOA;;;;;;;;;;;;;;;;;ACfA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAI,sEAAYA,UAAhB,EAA4B;AAC1B;AACD;;AAED,gFAAyBC,eAAzB,CAAyC,yDAAzC,WACS,UAAAC,GAAG;AAAA,aAAIzH,OAAO,CAACgH,KAAR,CAAcS,GAAd,CAAJ;AAAA,KADZ","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\nimport { CanActivate, Route, Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService implements CanActivate {\n\n  constructor(private route: Router) { }\n  canActivate(): boolean {\n    const token = localStorage.getItem(\"token\")\n    if (token != null) {\n      return true;\n    } else {\n      this.route.navigate(['login']);\n      return false;\n    }\n\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { HomeComponent } from './home/home.component';\nimport { AuthService } from './Auth/auth.service';\nimport { CreateAccountComponent } from './home/body/create-account/create-account.component';\nimport { VerfierComponent } from './home/body/verfier/verfier.component';\nimport { ReworkComponent } from './home/body/rework/rework.component';\nimport { SearchComponent } from './home/body/search/search.component';\n\n\nconst routes: Routes = [\n  { path: \"\", redirectTo: \"login\", pathMatch: \"full\" },\n  {path:\"login\", component:LoginComponent},\n  {path:\"aoa\", component:HomeComponent, canActivate:[AuthService], children:[\n    {path:\"create\", component: CreateAccountComponent,canActivate:[AuthService]},\n    {path:\"verifier\", component: VerfierComponent,canActivate:[AuthService]},\n    {path:\"rework\", component: ReworkComponent,canActivate:[AuthService]},\n    {path:\"search\", component: SearchComponent,canActivate:[AuthService]}\n\n  ]}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'accountopeningproject';\n}\n","<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './login/login.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MaterialModule } from './material/material.module';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpInterceptorProviders } from './interceptor/interceptorList';\nimport { HttpClientModule } from '@angular/common/http';\nimport { HomeComponent } from './home/home.component';\nimport { HeaderComponent } from './home/header/header.component';\nimport { FooterComponent } from './home/footer/footer.component';\nimport { MenuComponent } from './home/menu/menu.component';\nimport { BodyComponent } from './home/body/body.component';\nimport { CreateAccountComponent } from './home/body/create-account/create-account.component';\nimport  {MatCurrencyFormatModule} from 'mat-currency-format';\nimport { VerfierComponent } from './home/body/verfier/verfier.component';\nimport { VerfierDialogComponent } from './home/body/verfier/verfier-dialog/verfier-dialog.component';\nimport { ReworkComponent } from './home/body/rework/rework.component';\nimport { ReworkDialogComponent } from './home/body/rework/rework-dialog/rework-dialog.component';\nimport { SearchComponent } from './home/body/search/search.component';\nimport { SearchDialogComponent } from './home/body/search/search-dialog/search-dialog.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    HomeComponent,\n    HeaderComponent,\n    FooterComponent,\n    MenuComponent,\n    BodyComponent,\n    CreateAccountComponent,\n    VerfierComponent,\n    VerfierDialogComponent,\n    ReworkComponent,\n    ReworkDialogComponent,\n    SearchComponent,\n    SearchDialogComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    MaterialModule,\n    MatCurrencyFormatModule\n  ],\n  providers: [HttpInterceptorProviders],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-body',\n  templateUrl: './body.component.html',\n  styleUrls: ['./body.component.css']\n})\nexport class BodyComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<router-outlet></router-outlet>\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { STEPPER_GLOBAL_OPTIONS } from '@angular/cdk/stepper';\nimport { Gender } from 'src/app/model/gender';\nimport { Status } from 'src/app/model/status';\nimport { validateHorizontalPosition } from '@angular/cdk/overlay';\nimport { MAT_RADIO_DEFAULT_OPTIONS } from '@angular/material/radio';\nimport { AppServiceService } from '../service/app-service.service';\nimport { EmployeeType } from 'src/app/model/employeeType';\nimport { AccountType } from 'src/app/model/accountType';\nimport { CardType } from 'src/app/model/cardType';\nimport { Application } from 'src/app/model/application';\nimport { CountService } from '../service/count.service';\n\n@Component({\n  selector: 'app-create-account',\n  templateUrl: './create-account.component.html',\n  styleUrls: ['./create-account.component.css'],\n  providers: [{\n    provide: MAT_RADIO_DEFAULT_OPTIONS,\n    useValue: { color: 'primary' },\n  }]\n})\nexport class CreateAccountComponent implements OnInit {\n\n  constructor(private fb: FormBuilder, private service: AppServiceService, private count:CountService) { }\n  applicationForm;\n  customerForm;\n  employeeForm;\n  errrorflagCustomer;\n  genders: string[] = new Array();\n  employeeTypes: EmployeeType[];\n  accountTypes: AccountType[];\n  cardTypes: CardType[];\n  enableSpinner;\n  application: Application;\n  ngOnInit(): void {\n    this.employeeForm = this.fb.group({\n      employeeId: [''],\n      firstName: [{ value: '', disabled: true }],\n      designation: ['', Validators.required],\n      employeeType: [''],\n      salary: ['', [Validators.required]]\n    });\n\n    this.customerForm = this.fb.group({\n      customerId: [''],\n      firstName: ['', [Validators.required]],\n      middleName: [''],\n      lastName: [''],\n      employee: this.employeeForm,\n      gender: ['', Validators.required],\n      age: ['', [Validators.required, Validators.pattern('[0-9]{0,2}')]],\n      correspondenceAddress: ['', Validators.required],\n      presentAddress: ['', Validators.required],\n      permanentAddress: ['', Validators.required]\n    });\n    this.applicationForm = this.fb.group({\n      applicationNo: [\"\"],\n      customer: this.customerForm,\n      accountType: [\"\", [Validators.required]],\n      cardType: [\"\", [Validators.required]],\n      overeseasAccount: [\"\", Validators.required],\n      createUser: [\"\"],\n      createDate: [\"\"],\n      lastModifiedUser: [\"\"],\n      lastModifiedDate: [\"\"],\n      status: [\"\"]\n    });\n\n\n    for (let item in Gender) {\n      if (isNaN(Number(item))) {\n        this.genders.push(item)\n      }\n    }\n    this.service.getAllEmployeeType().subscribe(data => {\n      this.employeeTypes = data;\n    })\n    this.service.getAllAccountType().subscribe(data => {\n      this.accountTypes = data;\n    })\n    this.service.getAllCardType().subscribe(data => {\n      this.cardTypes = data;\n    })\n    console.log(this.genders)\n  }\n\n  get firstName() {\n    return this.customerForm.get('firstName');\n  }\n\n  get middleName() {\n    return this.customerForm.get('middleName');\n  }\n\n  get lastName() {\n    return this.customerForm.get('lastName');\n  }\n  get gender() {\n    return this.customerForm.get('gender');\n  }\n  get correspondenceAddress() {\n    return this.customerForm.get('correspondenceAddress');\n  }\n  get presentAddress() {\n    return this.customerForm.get('presentAddress');\n  }\n  get permanentAddress() {\n    return this.customerForm.get('permanentAddress');\n  }\n  get designation() {\n    return this.employeeForm.get('designation');\n  }\n  get salary() {\n    return this.employeeForm.get('salary');\n  }\n  get age() {\n    return this.customerForm.get('age');\n  }\n  get accountType() {\n    return this.applicationForm.get('accountType');\n  }\n  get cardType() {\n    return this.applicationForm.get('cardType');\n  }\n  get overeseasAccount() {\n    return this.applicationForm.get('overeseasAccount')\n  }\n  onSubmit() {\n    console.log(\"onsubmit\")\n    console.log(this.customerForm.valid);\n    this.employeeForm.get(\"firstName\").setValue(this.customerForm.get(\"firstName\").value)\n    if (!this.customerForm.valid) {\n      this.errrorflagCustomer = true;\n    } else {\n      this.errrorflagCustomer = false;\n    }\n    console.log(this.customerForm.value)\n  }\n  usAmount = 0;\n  errorFlagEmployee;\n  updateUSAmount(event) {\n    this.usAmount = event.target.value;\n  }\n  onEmployeeSubmit() {\n    console.log(this.customerForm.valid);\n    if (!this.employeeForm.valid) {\n      this.errorFlagEmployee = true;\n    } else {\n      this.errorFlagEmployee = false;\n      console.log(this.customerForm.value)\n\n    }\n  }\n  errorFlagApplication;\n\n  onApplicationSubmit() {\n    console.log(\"applicationForm\", this.applicationForm.valid)\n    console.log(this.applicationForm.value);\n\n    if (!this.applicationForm.valid) {\n      this.errorFlagApplication = true;\n    } else {\n      this.errorFlagApplication = false;\n      console.log(this.applicationForm.value)\n      this.enableSpinner = true;\n      this.applicationForm.get(\"createUser\").setValue(localStorage.getItem('username'));\n      this.applicationForm.get('createDate').setValue(new Date());\n      this.applicationForm.get('status').setValue(Status.SUBMIT);\n\n      console.log(this.applicationForm.value)\n      this.service.insertApplication(this.applicationForm.value).subscribe(data => {\n        this.service.getCountRework().subscribe(data=>{\n          this.service.getCountVerifier().subscribe(data1=>{\n            this.count.setverifierCount(data1);\n            this.count.setReworkCount(data);\n          })\n        })\n        this.enableSpinner = false;\n        console.log(data)\n        this.application = data;\n      });\n\n    }\n    console.log(this.errorFlagApplication);\n  }\n}\n","<mat-horizontal-stepper  #stepper>\n  <mat-step [stepControl]=\"customerForm\">\n    <form [formGroup]=\"customerForm\" (ngSubmit)=\"onSubmit()\">\n      <ng-template matStepLabel>Fill out your customer details</ng-template>\n      <mat-form-field appearance=\"outline\">\n        <mat-label>FirstName</mat-label>\n        <input matInput placeholder=\"enter your firstName\" formControlName=\"firstName\" required>\n        <div style=\" text-align: right;\" *ngIf=\"firstName.invalid && firstName.touched || errrorflagCustomer\"\n          class=\"text-danger\">\n          <small *ngIf=\"firstName.errors?.required\"> FirstNmae is Required</small>\n        </div>\n      </mat-form-field>\n      <mat-form-field appearance=\"outline\">\n        <mat-label>MiddleName</mat-label>\n        <input matInput placeholder=\"enter your middleName\" formControlName=\"middleName\" required>\n        <div style=\" text-align: right;\" *ngIf=\"middleName.invalid && middleName.touched || errrorflagCustomer\"\n          class=\"text-danger\">\n          <small *ngIf=\"middleName.errors?.required\"> MiddleName is Required</small>\n        </div>\n      </mat-form-field>\n\n      <mat-form-field appearance=\"outline\">\n        <mat-label>LastName</mat-label>\n        <input matInput placeholder=\"enter your lastName\" formControlName=\"lastName\" required>\n        <div style=\" text-align: right;\" *ngIf=\"lastName.invalid && lastName.touched || errrorflagCustomer\"\n          class=\"text-danger\">\n          <small *ngIf=\"lastName.errors?.required\"> lastName is Required</small>\n        </div>\n      </mat-form-field>\n      <div style=\"margin-left: 10px;\">\n        <label>Gender: </label>\n        <mat-radio-group formControlName=\"gender\">\n          <mat-radio-button *ngFor=\"let gen of genders\" [value]=\"gen\">{{gen}}</mat-radio-button>\n        </mat-radio-group>\n        <div *ngIf=\"gender.invalid && gender.touched || errrorflagCustomer\" class=\"text-danger\">\n          <small *ngIf=\"gender.errors?.required\"> Gender is Required</small>\n        </div>\n      </div>\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Age</mat-label>\n        <input matInput placeholder=\"enter your Age\" formControlName=\"age\" required>\n        <div style=\" text-align: right;\" *ngIf=\"age.invalid && age.touched || errrorflagCustomer\" class=\"text-danger\">\n          <small *ngIf=\"age.errors?.required\"> Age is Required</small>\n          <small *ngIf=\"age.errors?.pattern\"> Age has to between 0 to 99</small>\n\n        </div>\n      </mat-form-field>\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Correspondence Address</mat-label>\n        <textarea formControlName=\"correspondenceAddress\" matInput\n          placeholder=\"enter your Correspondence Address\"></textarea>\n        <div style=\" text-align: right;\"\n          *ngIf=\"correspondenceAddress.invalid && correspondenceAddress.touched || errrorflagCustomer\"\n          class=\"text-danger\">\n          <small *ngIf=\"correspondenceAddress.errors?.required\"> Correspondence Address is Required</small>\n        </div>\n      </mat-form-field>\n      <mat-form-field appearance=\"outline\">\n        <mat-label>present Address </mat-label>\n        <textarea formControlName=\"presentAddress\" matInput placeholder=\"enter your Correspondence Address\"></textarea>\n        <div style=\" text-align: right;\" *ngIf=\"presentAddress.invalid && presentAddress.touched || errrorflagCustomer\"\n          class=\"text-danger\">\n          <small *ngIf=\"presentAddress.errors?.required\"> Present Address is Required</small>\n        </div>\n      </mat-form-field>\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Permanent Address</mat-label>\n        <textarea formControlName=\"permanentAddress\" matInput\n          placeholder=\"enter your permanentAddress Address\"></textarea>\n        <div style=\" text-align: right;\"\n          *ngIf=\"permanentAddress.invalid && permanentAddress.touched || errrorflagCustomer\" class=\"text-danger\">\n          <small *ngIf=\"permanentAddress.errors?.required\"> Permanent Address is Required</small>\n        </div>\n      </mat-form-field>\n\n      <div align=\"end\" style=\"padding-right: 10px;\">\n        <button mat-raised-button matStepperNext color=\"primary\">Next</button>\n      </div>\n    </form>\n  </mat-step>\n\n  <mat-step [stepControl]=\"employeeForm\">\n    <form [formGroup]=\"employeeForm\" (ngSubmit)=\"onEmployeeSubmit()\">\n      <ng-template matStepLabel>Fill out Employee details of customer</ng-template>\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Name</mat-label>\n        <input matInput placeholder=\"enter your firstName\" formControlName=\"firstName\">\n      </mat-form-field>\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Designation</mat-label>\n        <input matInput placeholder=\"enter your Designation\" formControlName=\"designation\" required>\n        <div style=\" text-align: right;\" *ngIf=\"designation.invalid && designation.touched || errorFlagEmployee\"\n          class=\"text-danger\">\n          <small *ngIf=\"designation.errors?.required\"> Designation is Required</small>\n        </div>\n      </mat-form-field>\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Employee Type</mat-label>\n        <mat-select formControlName=\"employeeType\">\n          <mat-option *ngFor=\"let type of employeeTypes\" [value]=\"type\">\n            {{type.employeeTypeName}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <mat-form-field appearance=\"outline\">\n        <mat-label>salary</mat-label>\n        <input matInput placeholder=\"enter your salary\" mvndrMatCurrencyFormat [allowNegative]=\"false\"\n          [currencyCode]=\"'INR'\" [value]=\"usAmount\" (blur)=\"updateUSAmount($event)\" required formControlName=\"salary\">\n        <div style=\" text-align: right;\" *ngIf=\"salary.invalid && salary.touched || errorFlagEmployee\"\n          class=\"text-danger\">\n          <small *ngIf=\"salary.errors?.required\"> salary is Required</small>\n        </div>\n      </mat-form-field>\n\n      <div align=\"end\">\n        <button mat-raised-button matStepperPrevious color=\"primary\">previous</button>\n        <button mat-raised-button matStepperNext color=\"primary\">Next</button>\n      </div>\n    </form>\n  </mat-step>\n  <mat-step [stepControl]=\"applicationForm\">\n    <form [formGroup]=\"applicationForm\" (ngSubmit)=\"onApplicationSubmit()\">\n      <ng-template matStepLabel>Fill out Application details</ng-template>\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Account Type</mat-label>\n        <mat-select formControlName=\"accountType\">\n          <mat-option *ngFor=\"let type of accountTypes\" [value]=\"type\">\n            {{type.accountTypeName}}\n          </mat-option>\n        </mat-select>\n        <div style=\" text-align: right;\" *ngIf=\"accountType.invalid && accountType.touched || errorFlagApplication\"\n          class=\"text-danger\">\n          <small *ngIf=\"accountType.errors?.required\"> Account Type is Required</small>\n        </div>\n      </mat-form-field>\n      <mat-form-field appearance=\"outline\">\n        <mat-label>Card Type</mat-label>\n        <mat-select formControlName=\"cardType\">\n          <mat-option *ngFor=\"let type of cardTypes\" [value]=\"type\">\n            {{type.cardTypeName}}\n          </mat-option>\n        </mat-select>\n        <div style=\" text-align: right;\" *ngIf=\"cardType.invalid && cardType.touched || errorFlagApplication\"\n          class=\"text-danger\">\n          <small *ngIf=\"cardType.errors?.required\"> Card Type is Required</small>\n        </div>\n      </mat-form-field>\n      <div style=\"margin-left: 10px;\">\n        <label>Overeseas Account: </label>\n        <mat-radio-group formControlName=\"overeseasAccount\">\n          <mat-radio-button  value=\"true\">Yes</mat-radio-button>\n          <mat-radio-button  value=\"false\">No</mat-radio-button>\n        </mat-radio-group>\n        <div *ngIf=\"overeseasAccount.invalid && overeseasAccount.touched || errorFlagApplication\" class=\"text-danger\">\n          <small *ngIf=\"overeseasAccount.errors?.required\"> Overeseas Account is Required</small>\n        </div>\n      </div>\n      <div align=\"end\">\n        <button mat-raised-button matStepperPrevious color=\"primary\">previous</button>\n        <button mat-raised-button matStepperNext color=\"primary\">Submit</button>\n      </div>\n    </form>\n  </mat-step>\n  <mat-step>\n    <ng-template matStepLabel>Done</ng-template>\n    <p>You are now done.</p>\n    <mat-spinner *ngIf=\"enableSpinner\"></mat-spinner>\n    <table *ngIf=\"!enableSpinner\">\n      <tr>\n        <td><b>Application Id:</b></td>\n        <td>{{application?application.applicationNo:\"\"}}</td>\n      </tr>\n      <tr>\n        <td><b>Customer Id:</b></td>\n        <td>{{application?application.customer?application.customer.customerId:\"\":\"\"}}</td>\n      </tr>\n      <tr>\n        <td><b>Employee Id:</b></td>\n        <td>{{application?application.customer?application.customer.employee?application.customer.employee.employeeId:\"\":\"\":\"\"}}</td>\n      </tr>\n    </table>\n    \n    \n  </mat-step>\n</mat-horizontal-stepper>","import { Component, OnInit, Inject } from '@angular/core';\nimport { Validators, FormBuilder } from '@angular/forms';\nimport { Application } from 'src/app/model/application';\nimport { CardType } from 'src/app/model/cardType';\nimport { AccountType } from 'src/app/model/accountType';\nimport { EmployeeType } from 'src/app/model/employeeType';\nimport { AppServiceService } from '../../service/app-service.service';\nimport { Gender } from 'src/app/model/gender';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { VerfierDialogComponent } from '../../verfier/verfier-dialog/verfier-dialog.component';\n\n@Component({\n  selector: 'app-rework-dialog',\n  templateUrl: './rework-dialog.component.html',\n  styleUrls: ['./rework-dialog.component.css']\n})\nexport class ReworkDialogComponent implements OnInit {\n\n  constructor(private fb: FormBuilder, public dialogRef: MatDialogRef<ReworkDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any, private service: AppServiceService) { }\n    \n  applicationForm;\n  customerForm;\n  employeeForm;\n  errrorflagCustomer;\n  genders: string[] = new Array();\n  employeeTypes: string[]= new Array();\n  accountTypes: string[]= new Array();\n  cardTypes: string[]= new Array();\n  application: Application;\n  ngOnInit(): void {\n    this.employeeForm = this.fb.group({\n      employeeId: [''],\n      firstName: [{ value: '', disabled: true }],\n      designation: ['', Validators.required],\n      employeeType: [''],\n      salary: ['', [Validators.required]]\n    });\n\n    this.customerForm = this.fb.group({\n      customerId: [''],\n      firstName: ['', [Validators.required]],\n      middleName: [''],\n      lastName: [''],\n      employee: this.employeeForm,\n      gender: ['', Validators.required],\n      age: ['', [Validators.required, Validators.pattern('[0-9]{0,2}')]],\n      correspondenceAddress: ['', Validators.required],\n      presentAddress: ['', Validators.required],\n      permanentAddress: ['', Validators.required]\n    });\n\n    this.applicationForm = this.fb.group({\n      applicationNo: [\"\"],\n      customer: this.customerForm,\n      accountType: [\"\", [Validators.required]],\n      cardType: [\"\", [Validators.required]],\n      overeseasAccount: [\"\", Validators.required],\n      createUser: [''],\n      createDate: [\"\"],\n      lastModifiedUser: [\"\"],\n      lastModifiedDate: [\"\"],\n      status: [\"\"]\n    });\n\n\n    for (let item in Gender) {\n      \n      if (isNaN(Number(item))) {\n        this.genders.push(item)\n      }\n    }\n    this.service.getAllEmployeeType().subscribe(data => {\n      data.forEach(da=>{\n        this.employeeTypes.push(da.employeeTypeName);\n      })\n    })\n    this.service.getAllAccountType().subscribe(data => {\n      data.forEach(da=>{\n        this.accountTypes.push(da.accountTypeName);\n      })\n    })\n    this.service.getAllCardType().subscribe(data => {\n      data.forEach(da=>{\n        this.cardTypes.push(da.cardTypeName);\n      })\n    })\n    console.log(this.genders)\n    \n    const application = this.data.application;\n    console.log(\"testing\",application)\n    application.overeseasAccount = application.overeseasAccount.toString();\n    this.applicationForm.setValue(application);\n    this.applicationForm.get('accountType').setValue(this.applicationForm.get('accountType').value.accountTypeName);\n    this.applicationForm.get('cardType').setValue(this.applicationForm.get('cardType').value.cardTypeName)\n    this.employeeForm.get('employeeType').setValue(this.employeeForm.get('employeeType').value.employeeTypeName)\n    console.log(\"testing1\",this.applicationForm.value)\n\n  }\n\n  get firstName() {\n    return this.customerForm.get('firstName');\n  }\n\n  get middleName() {\n    return this.customerForm.get('middleName');\n  }\n\n  get lastName() {\n    return this.customerForm.get('lastName');\n  }\n  get gender() {\n    return this.customerForm.get('gender');\n  }\n  get correspondenceAddress() {\n    return this.customerForm.get('correspondenceAddress');\n  }\n  get presentAddress() {\n    return this.customerForm.get('presentAddress');\n  }\n  get permanentAddress() {\n    return this.customerForm.get('permanentAddress');\n  }\n  get designation() {\n    return this.employeeForm.get('designation');\n  }\n  get salary() {\n    return this.employeeForm.get('salary');\n  }\n  get age() {\n    return this.customerForm.get('age');\n  }\n  get accountType() {\n    return this.applicationForm.get('accountType');\n  }\n  get cardType() {\n    return this.applicationForm.get('cardType');\n  }\n  get overeseasAccount() {\n    return this.applicationForm.get('overeseasAccount')\n  }\n  onSubmit() {\n    console.log(\"onsubmit\")\n    console.log(this.customerForm.valid);\n    this.employeeForm.get(\"firstName\").setValue(this.customerForm.get(\"firstName\").value)\n    if (!this.customerForm.valid) {\n      this.errrorflagCustomer = true;\n    } else {\n      this.errrorflagCustomer = false;\n    }\n    console.log(this.customerForm.value)\n  }\n  usAmount = 0;\n  errorFlagEmployee;\n  updateUSAmount(event) {\n    this.usAmount = event.target.value;\n  }\n  onEmployeeSubmit() {\n    console.log(this.customerForm.valid);\n    if (!this.employeeForm.valid) {\n      this.errorFlagEmployee = true;\n    } else {\n      this.errorFlagEmployee = false;\n      console.log(this.customerForm.value)\n\n    }\n  }\n  errorFlagApplication;\n\n  onApplicationSubmit() {\n    console.log(\"applicationForm\", this.applicationForm.valid)\n\n    if (!this.applicationForm.valid) {\n      this.errorFlagApplication = true;\n    } else {\n      this.errorFlagApplication = false;\n      console.log(\"application\",this.applicationForm.value)\n      this.applicationForm.get(\"createUser\").setValue(localStorage.getItem('username'));\n      this.applicationForm.get('createDate').setValue(new Date());\n      this.dialogRef.close(this.applicationForm.value);\n    }\n    console.log(this.errorFlagApplication);\n  }\n}\n","<mat-horizontal-stepper  #stepper>\n    <mat-step [stepControl]=\"customerForm\">\n      <form [formGroup]=\"customerForm\" (ngSubmit)=\"onSubmit()\">\n        <ng-template matStepLabel>Update your customer details</ng-template>\n        <mat-form-field appearance=\"outline\">\n          <mat-label>FirstName</mat-label>\n          <input matInput placeholder=\"enter your firstName\" formControlName=\"firstName\" required>\n          <div style=\" text-align: right;\" *ngIf=\"firstName.invalid && firstName.touched || errrorflagCustomer\"\n            class=\"text-danger\">\n            <small *ngIf=\"firstName.errors?.required\"> FirstNmae is Required</small>\n          </div>\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n          <mat-label>MiddleName</mat-label>\n          <input matInput placeholder=\"enter your middleName\" formControlName=\"middleName\" required>\n          <div style=\" text-align: right;\" *ngIf=\"middleName.invalid && middleName.touched || errrorflagCustomer\"\n            class=\"text-danger\">\n            <small *ngIf=\"middleName.errors?.required\"> MiddleName is Required</small>\n          </div>\n        </mat-form-field>\n  \n        <mat-form-field appearance=\"outline\">\n          <mat-label>LastName</mat-label>\n          <input matInput placeholder=\"enter your lastName\" formControlName=\"lastName\" required>\n          <div style=\" text-align: right;\" *ngIf=\"lastName.invalid && lastName.touched || errrorflagCustomer\"\n            class=\"text-danger\">\n            <small *ngIf=\"lastName.errors?.required\"> lastName is Required</small>\n          </div>\n        </mat-form-field>\n        <div style=\"margin-left: 10px;\">\n          <label>Gender: </label>\n          <mat-radio-group formControlName=\"gender\">\n            <mat-radio-button *ngFor=\"let gen of genders\" [value]=\"gen\">{{gen}}</mat-radio-button>\n          </mat-radio-group>\n          <div *ngIf=\"gender.invalid && gender.touched || errrorflagCustomer\" class=\"text-danger\">\n            <small *ngIf=\"gender.errors?.required\"> Gender is Required</small>\n          </div>\n        </div>\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Age</mat-label>\n          <input matInput placeholder=\"enter your Age\" formControlName=\"age\" required>\n          <div style=\" text-align: right;\" *ngIf=\"age.invalid && age.touched || errrorflagCustomer\" class=\"text-danger\">\n            <small *ngIf=\"age.errors?.required\"> Age is Required</small>\n            <small *ngIf=\"age.errors?.pattern\"> Age has to between 0 to 99</small>\n  \n          </div>\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Correspondence Address</mat-label>\n          <textarea formControlName=\"correspondenceAddress\" matInput\n            placeholder=\"enter your Correspondence Address\"></textarea>\n          <div style=\" text-align: right;\"\n            *ngIf=\"correspondenceAddress.invalid && correspondenceAddress.touched || errrorflagCustomer\"\n            class=\"text-danger\">\n            <small *ngIf=\"correspondenceAddress.errors?.required\"> Correspondence Address is Required</small>\n          </div>\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n          <mat-label>present Address </mat-label>\n          <textarea formControlName=\"presentAddress\" matInput placeholder=\"enter your Correspondence Address\"></textarea>\n          <div style=\" text-align: right;\" *ngIf=\"presentAddress.invalid && presentAddress.touched || errrorflagCustomer\"\n            class=\"text-danger\">\n            <small *ngIf=\"presentAddress.errors?.required\"> Present Address is Required</small>\n          </div>\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Permanent Address</mat-label>\n          <textarea formControlName=\"permanentAddress\" matInput\n            placeholder=\"enter your permanentAddress Address\"></textarea>\n          <div style=\" text-align: right;\"\n            *ngIf=\"permanentAddress.invalid && permanentAddress.touched || errrorflagCustomer\" class=\"text-danger\">\n            <small *ngIf=\"permanentAddress.errors?.required\"> Permanent Address is Required</small>\n          </div>\n        </mat-form-field>\n  \n        <div align=\"end\" style=\"padding-right: 10px;\">\n          <button mat-raised-button matStepperNext color=\"primary\">Next</button>\n        </div>\n      </form>\n    </mat-step>\n  \n    <mat-step [stepControl]=\"employeeForm\">\n      <form [formGroup]=\"employeeForm\" (ngSubmit)=\"onEmployeeSubmit()\">\n        <ng-template matStepLabel>Update Employee details of customer</ng-template>\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Name</mat-label>\n          <input matInput placeholder=\"enter your firstName\" formControlName=\"firstName\">\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Designation</mat-label>\n          <input matInput placeholder=\"enter your Designation\" formControlName=\"designation\" required>\n          <div style=\" text-align: right;\" *ngIf=\"designation.invalid && designation.touched || errorFlagEmployee\"\n            class=\"text-danger\">\n            <small *ngIf=\"designation.errors?.required\"> Designation is Required</small>\n          </div>\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Employee Type</mat-label>\n          <mat-select formControlName=\"employeeType\">\n            <mat-option *ngFor=\"let type of employeeTypes\" [value]=\"type\">\n              {{type}}\n            </mat-option>\n          </mat-select>\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n          <mat-label>salary</mat-label>\n          <input matInput placeholder=\"enter your salary\" mvndrMatCurrencyFormat [allowNegative]=\"false\"\n            [currencyCode]=\"'INR'\" [value]=\"usAmount\" (blur)=\"updateUSAmount($event)\" required formControlName=\"salary\">\n          <div style=\" text-align: right;\" *ngIf=\"salary.invalid && salary.touched || errorFlagEmployee\"\n            class=\"text-danger\">\n            <small *ngIf=\"salary.errors?.required\"> salary is Required</small>\n          </div>\n        </mat-form-field>\n  \n        <div align=\"end\">\n          <button mat-raised-button matStepperPrevious color=\"primary\">previous</button>\n          <button mat-raised-button matStepperNext color=\"primary\">Next</button>\n        </div>\n      </form>\n    </mat-step>\n    <mat-step [stepControl]=\"applicationForm\">\n      <form [formGroup]=\"applicationForm\" (ngSubmit)=\"onApplicationSubmit()\">\n        <ng-template matStepLabel>Update Application details</ng-template>\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Account Type</mat-label>\n          <mat-select formControlName=\"accountType\">\n            <mat-option *ngFor=\"let type of accountTypes\" [value]=\"type\">\n              {{type}}\n            </mat-option>\n          </mat-select>\n          <div style=\" text-align: right;\" *ngIf=\"accountType.invalid && accountType.touched || errorFlagApplication\"\n            class=\"text-danger\">\n            <small *ngIf=\"accountType.errors?.required\"> Account Type is Required</small>\n          </div>\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Card Type</mat-label>\n          <mat-select formControlName=\"cardType\">\n            <mat-option *ngFor=\"let type of cardTypes\" [value]=\"type\">\n              {{type}}\n            </mat-option>\n          </mat-select>\n          <div style=\" text-align: right;\" *ngIf=\"cardType.invalid && cardType.touched || errorFlagApplication\"\n            class=\"text-danger\">\n            <small *ngIf=\"cardType.errors?.required\"> Card Type is Required</small>\n          </div>\n        </mat-form-field>\n        <div style=\"margin-left: 10px;\">\n          <label>Overeseas Account: </label>\n          <mat-radio-group formControlName=\"overeseasAccount\">\n            <mat-radio-button  value=\"true\">Yes</mat-radio-button>\n            <mat-radio-button  value=\"false\">No</mat-radio-button>\n          </mat-radio-group>\n          <div *ngIf=\"overeseasAccount.invalid && overeseasAccount.touched || errorFlagApplication\" class=\"text-danger\">\n            <small *ngIf=\"overeseasAccount.errors?.required\"> Overeseas Account is Required</small>\n          </div>\n        </div>\n        <div align=\"end\">\n          <button mat-raised-button matStepperPrevious color=\"primary\">previous</button>\n          <button mat-raised-button matStepperNext color=\"primary\">Submit</button>\n        </div>\n      </form>\n    </mat-step>\n  \n  </mat-horizontal-stepper>","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatSort } from '@angular/material/sort';\nimport { AppServiceService } from '../service/app-service.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { VerfierDialogComponent } from '../verfier/verfier-dialog/verfier-dialog.component';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { ReworkDialogComponent } from './rework-dialog/rework-dialog.component';\nimport { CountService } from '../service/count.service';\nimport { MatPaginator } from '@angular/material/paginator';\n\n@Component({\n  selector: 'app-rework',\n  templateUrl: './rework.component.html',\n  styleUrls: ['./rework.component.css']\n})\nexport class ReworkComponent implements OnInit {\n\n  dataSource;\n  spinnerFlag;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\n\n  displayedColumns = ['applicationNo', 'customer.firstName', 'accountType', 'status', 'open'];\n\n  constructor(private service: AppServiceService, public dialog: MatDialog, private count: CountService) { }\n\n  ngOnInit() {\n    this.service.getAllReworkData().subscribe((data) => {\n      this.dataSource = new MatTableDataSource(data);\n      this.dataSource.sort = this.sort;\n      this.dataSource.paginator = this.paginator;\n\n    })\n\n  }\n\n  openDialog(rowData) {\n    console.log(\"rowdata\", rowData)\n    let dialogRef = this.dialog.open(ReworkDialogComponent, {\n      data: { application: rowData }\n    })\n\n    dialogRef.afterClosed().subscribe(da => {\n      this.spinnerFlag = true;\n      console.log(\"REQUESTDA\", da);\n      this.service.updateApplication(da).subscribe((response) => {\n        this.service.getCountVerifier().subscribe(data => {\n          this.service.getCountRework().subscribe(data1 => {\n            this.count.setverifierCount(data);\n            this.count.setReworkCount(data1);\n            this.spinnerFlag = false;\n            console.log(response);\n            this.ngOnInit();\n          })\n        })\n\n      })\n    })\n  }\n\n}\n","<h2 style=\"padding: 10px;\">ReWork List</h2>\n<mat-divider></mat-divider>\n<mat-spinner *ngIf=\"spinnerFlag\"></mat-spinner>\n<div class=\"ta\">\n    <div class=\"mat-elevation-z8 \">\n        <table  mat-table [dataSource]=\"dataSource\" matSort>\n      \n          <!-- Position Column -->\n          <ng-container matColumnDef=\"applicationNo\">\n            <th mat-header-cell *matHeaderCellDef> ApplicationNo. </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.applicationNo}} </td>\n          </ng-container>\n      \n          <!-- Name Column -->\n          <ng-container matColumnDef=\"customer.firstName\">\n            <th mat-header-cell *matHeaderCellDef> FirstName </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.customer.firstName}} </td>\n          </ng-container>\n      \n          <!-- Weight Column -->\n          <ng-container matColumnDef=\"accountType\">\n            <th mat-header-cell *matHeaderCellDef> Account Type </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.accountType.accountTypeName}} </td>\n          </ng-container>\n      \n          <!-- Symbol Column -->\n          <ng-container matColumnDef=\"status\">\n            <th mat-header-cell *matHeaderCellDef> Symbol </th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.status}} </td>\n          </ng-container>\n    \n          <ng-container matColumnDef=\"open\">\n            <th mat-header-cell *matHeaderCellDef mat-sort-header> Link </th>\n            <td mat-cell *matCellDef=\"let element\">\n                <mat-icon (click)=\"openDialog(element)\" >open_in_new</mat-icon>\n            </td>\n        </ng-container>\n      \n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n        </table>\n      \n        <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\n      </div>\n    </div>","import { Component, OnInit, ViewChild, Inject } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { CountService } from '../../service/count.service';\nimport { AppServiceService } from '../../service/app-service.service';\nimport { MatSort } from '@angular/material/sort';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Gender } from 'src/app/model/gender';\nimport { Status } from 'src/app/model/status';\n\n@Component({\n  selector: 'app-search-dialog',\n  templateUrl: './search-dialog.component.html',\n  styleUrls: ['./search-dialog.component.css']\n})\nexport class SearchDialogComponent implements OnInit {\n  constructor(private fb: FormBuilder, public dialogRef: MatDialogRef<SearchDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any, private service: AppServiceService) { }\n  employeeForm;\n  customerForm;\n  applicationForm;\n  genders: string[] = new Array();\n  employeeTypes: string[] = new Array();\n  accountTypes: String[] = new Array();\n  cardTypes: string[] = new Array();\n  usAmount = 0;\n  errorFlagEmployee;\n  errrorflagCustomer;\n  errorFlagApplication;\n\n  ngOnInit(): void {\n    this.employeeForm = this.fb.group({\n      employeeId: [{ value: '', disabled: true }],\n      firstName: [{ value: '', disabled: true }],\n      designation: [{ value: '', disabled: true }, Validators.required],\n      employeeType: [{ value: '', disabled: true }],\n      salary: [{ value: '', disabled: true }, [Validators.required]]\n    });\n\n    this.customerForm = this.fb.group({\n      customerId: [{ value: '', disabled: true }],\n      firstName: [{ value: '', disabled: true }, [Validators.required]],\n      middleName: [{ value: '', disabled: true }],\n      lastName: [{ value: '', disabled: true }],\n      employee: this.employeeForm,\n      gender: [{ value: '', disabled: true }, Validators.required],\n      age: [{ value: '', disabled: true }, [Validators.required, Validators.pattern('[0-9]{0,2}')]],\n      correspondenceAddress: [{ value: '', disabled: true }, Validators.required],\n      presentAddress: [{ value: '', disabled: true }, Validators.required],\n      permanentAddress: [{ value: '', disabled: true }, Validators.required]\n    });\n\n    this.applicationForm = this.fb.group({\n      accountType: [{ value: '', disabled: true }, [Validators.required]],\n      applicationNo: [{ value: '', disabled: true }],\n      customer: this.customerForm,\n      cardType: [{ value: '', disabled: true }, [Validators.required]],\n      overeseasAccount: [{ value: '', disabled: true }, Validators.required],\n      createUser: [{ value: '', disabled: true }],\n      createDate: [{ value: '', disabled: true }],\n      lastModifiedUser: [{ value: '', disabled: true }],\n      lastModifiedDate: [{ value: '', disabled: true }],\n      status: [{ value: '', disabled: true }]\n    });\n\n    this.applicationForm.get('applicationNo')\n    for (let item in Gender) {\n      if (isNaN(Number(item))) {\n        this.genders.push(item)\n      }\n    }\n\n    this.service.getAllEmployeeType().subscribe(data => {\n      data.forEach(da => {\n        this.employeeTypes.push(da.employeeTypeName);\n      });\n    })\n\n    this.service.getAllAccountType().subscribe(data => {\n      console.log(data);\n      data.forEach(da => {\n        console.log(da)\n        this.accountTypes.push(da.accountTypeName);\n      });\n    })\n    \n    this.service.getAllCardType().subscribe(data => {\n      data.forEach(da => {\n        this.cardTypes.push(da.cardTypeName);\n      });\n\n    })\n\n\n    const application = this.data.application;\n    console.log(application)\n    application.overeseasAccount = application.overeseasAccount.toString();\n    this.applicationForm.setValue(application);\n    this.applicationForm.get('accountType').setValue(this.applicationForm.get('accountType').value.accountTypeName);\n    this.applicationForm.get('cardType').setValue(this.applicationForm.get('cardType').value.cardTypeName)\n    this.employeeForm.get('employeeType').setValue(this.employeeForm.get('employeeType').value.employeeTypeName)\n\n    console.log();\n    console.log(application.accountType);\n\n  }\n  get firstName() {\n    return this.customerForm.get('firstName');\n  }\n\n  get middleName() {\n    return this.customerForm.get('middleName');\n  }\n\n  get lastName() {\n    return this.customerForm.get('lastName');\n  }\n  get gender() {\n    return this.customerForm.get('gender');\n  }\n  get correspondenceAddress() {\n    return this.customerForm.get('correspondenceAddress');\n  }\n  get presentAddress() {\n    return this.customerForm.get('presentAddress');\n  }\n  get permanentAddress() {\n    return this.customerForm.get('permanentAddress');\n  }\n  get designation() {\n    return this.employeeForm.get('designation');\n  }\n  get salary() {\n    return this.employeeForm.get('salary');\n  }\n  get age() {\n    return this.customerForm.get('age');\n  }\n  get accountType() {\n    return this.applicationForm.get('accountType');\n  }\n  get cardType() {\n    return this.applicationForm.get('cardType');\n  }\n  get overeseasAccount() {\n    return this.applicationForm.get('overeseasAccount')\n  }\n\n  updateUSAmount(event) {\n    this.usAmount = event.target.value;\n  }\n  approve() {\n    this.applicationForm.get(\"status\").setValue(Status.APPROVE);\n    this.dialogRef.close(this.applicationForm.value);\n  }\n  rework() {\n    this.applicationForm.get(\"status\").setValue(Status.REWORK);\n    this.dialogRef.close(this.applicationForm.value);\n  }\n  reject() {\n    this.applicationForm.get(\"status\").setValue(Status.REJECT);\n    this.dialogRef.close(this.applicationForm.value);\n  }\n  cancel() {\n    this.applicationForm.get(\"status\").setValue(Status.CANCEL);\n    this.dialogRef.close(this.applicationForm.value);\n  }\n \n\n}\n","<h2 mat-dialog-title>Verifier WorkItem</h2>\n<mat-dialog-content class=\"mat-typography\">\n\n<form [formGroup]=\"applicationForm\">\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Application Id</mat-label>\n        <input matInput placeholder=\"enter your Application id\" formControlName=\"applicationNo\" readonly required>\n    </mat-form-field>\n\n<div [formGroup]=\"customerForm\" >\n    <mat-form-field appearance=\"outline\">\n        <mat-label>FirstName</mat-label>\n        <input matInput placeholder=\"enter your firstName\" formControlName=\"firstName\" required readonly>\n        <div style=\" text-align: right;\" *ngIf=\"firstName.invalid && firstName.touched || errrorflagCustomer\"\n            class=\"text-danger\">\n            <small *ngIf=\"firstName.errors?.required\"> FirstNmae is Required</small>\n        </div>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n        <mat-label>MiddleName</mat-label>\n        <input matInput placeholder=\"enter your middleName\" formControlName=\"middleName\" required readonly>\n        <div style=\" text-align: right;\" *ngIf=\"middleName.invalid && middleName.touched || errrorflagCustomer\"\n            class=\"text-danger\">\n            <small *ngIf=\"middleName.errors?.required\"> MiddleName is Required</small>\n        </div>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n        <mat-label>LastName</mat-label>\n        <input matInput placeholder=\"enter your lastName\" formControlName=\"lastName\" required readonly>\n        <div style=\" text-align: right;\" *ngIf=\"lastName.invalid && lastName.touched || errrorflagCustomer\"\n            class=\"text-danger\">\n            <small *ngIf=\"lastName.errors?.required\"> lastName is Required</small>\n        </div>\n    </mat-form-field>\n\n    <div style=\"margin-left: 10px;\">\n        <label>Gender: </label>\n        <mat-radio-group formControlName=\"gender\" >\n            <mat-radio-button *ngFor=\"let gen of genders\" [value]=\"gen\">{{gen}}</mat-radio-button>\n        </mat-radio-group>\n        <div *ngIf=\"gender.invalid && gender.touched || errrorflagCustomer\" class=\"text-danger\">\n            <small *ngIf=\"gender.errors?.required\"> Gender is Required</small>\n        </div>\n    </div>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Age</mat-label>\n        <input matInput placeholder=\"enter your Age\" formControlName=\"age\" required>\n        <div style=\" text-align: right;\" *ngIf=\"age.invalid && age.touched || errrorflagCustomer\" class=\"text-danger\">\n            <small *ngIf=\"age.errors?.required\"> Age is Required</small>\n            <small *ngIf=\"age.errors?.pattern\"> Age has to between 0 to 99</small>\n\n        </div>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Correspondence Address</mat-label>\n        <textarea formControlName=\"correspondenceAddress\" matInput\n            placeholder=\"enter your Correspondence Address\"></textarea>\n        <div style=\" text-align: right;\"\n            *ngIf=\"correspondenceAddress.invalid && correspondenceAddress.touched || errrorflagCustomer\"\n            class=\"text-danger\">\n            <small *ngIf=\"correspondenceAddress.errors?.required\"> Correspondence Address is Required</small>\n        </div>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n        <mat-label>present Address </mat-label>\n        <textarea formControlName=\"presentAddress\" matInput placeholder=\"enter your Correspondence Address\"></textarea>\n        <div style=\" text-align: right;\" *ngIf=\"presentAddress.invalid && presentAddress.touched || errrorflagCustomer\"\n            class=\"text-danger\">\n            <small *ngIf=\"presentAddress.errors?.required\"> Present Address is Required</small>\n        </div>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Permanent Address</mat-label>\n        <textarea formControlName=\"permanentAddress\" matInput\n            placeholder=\"enter your permanentAddress Address\"></textarea>\n        <div style=\" text-align: right;\"\n            *ngIf=\"permanentAddress.invalid && permanentAddress.touched || errrorflagCustomer\" class=\"text-danger\">\n            <small *ngIf=\"permanentAddress.errors?.required\"> Permanent Address is Required</small>\n        </div>\n    </mat-form-field>\n</div>\n\n    \n\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Account Type</mat-label>\n        <mat-select formControlName=\"accountType\">\n            <mat-option *ngFor=\"let type of accountTypes\" [value]=\"type\">\n                {{type}}\n            </mat-option>\n        </mat-select>\n        <div style=\" text-align: right;\" *ngIf=\"accountType.invalid && accountType.touched || errorFlagApplication\"\n            class=\"text-danger\">\n            <small *ngIf=\"accountType.errors?.required\"> Account Type is Required</small>\n        </div>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Card Type</mat-label>\n        <mat-select formControlName=\"cardType\">\n            <mat-option *ngFor=\"let type of cardTypes\" [value]=\"type\">\n                {{type}}\n            </mat-option>\n        </mat-select>\n        <div style=\" text-align: right;\" *ngIf=\"cardType.invalid && cardType.touched || errorFlagApplication\"\n            class=\"text-danger\">\n            <small *ngIf=\"cardType.errors?.required\"> Card Type is Required</small>\n        </div>\n    </mat-form-field>\n\n    <div style=\"margin-left: 10px;\">\n        <label>Overeseas Account: </label>\n        <mat-radio-group formControlName=\"overeseasAccount\">\n            <mat-radio-button value=\"true\">Yes</mat-radio-button>\n            <mat-radio-button value=\"false\">No</mat-radio-button>\n        </mat-radio-group>\n        <div *ngIf=\"overeseasAccount.invalid && overeseasAccount.touched || errorFlagApplication\" class=\"text-danger\">\n            <small *ngIf=\"overeseasAccount.errors?.required\"> Overeseas Account is Required</small>\n        </div>\n    </div>\n<div [formGroup]=\"employeeForm\">\n\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Designation</mat-label>\n        <input matInput placeholder=\"enter your Designation\" formControlName=\"designation\" required>\n        <div style=\" text-align: right;\" *ngIf=\"designation.invalid && designation.touched || errorFlagEmployee\"\n            class=\"text-danger\">\n            <small *ngIf=\"designation.errors?.required\"> Designation is Required</small>\n        </div>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Employee Type</mat-label>\n        <mat-select formControlName=\"employeeType\">\n            <mat-option *ngFor=\"let type of employeeTypes\" [value]=\"type\">\n                {{type}}\n            </mat-option>\n        </mat-select>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n        <mat-label>salary</mat-label>\n        <input matInput placeholder=\"enter your salary\" mvndrMatCurrencyFormat [allowNegative]=\"false\"\n            [currencyCode]=\"'INR'\" [value]=\"usAmount\" (blur)=\"updateUSAmount($event)\" required formControlName=\"salary\">\n        <div style=\" text-align: right;\" *ngIf=\"salary.invalid && salary.touched || errorFlagEmployee\"\n            class=\"text-danger\">\n            <small *ngIf=\"salary.errors?.required\"> salary is Required</small>\n        </div>\n    </mat-form-field>\n\n</div>\n</form>\n</mat-dialog-content>\n<mat-dialog-actions align=\"end\">\n   \n    <button mat-raised-button color=\"primary\" [mat-dialog-close]=\"true\">Close</button>\n\n  </mat-dialog-actions>","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { AppServiceService } from '../service/app-service.service';\nimport { MatSort } from '@angular/material/sort';\nimport { FormBuilder } from '@angular/forms';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatDialog } from '@angular/material/dialog';\nimport { SearchDialogComponent } from './search-dialog/search-dialog.component';\n\n@Component({\n  selector: 'app-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.css']\n})\nexport class SearchComponent implements OnInit {\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\n\n  constructor(private service: AppServiceService, private fb: FormBuilder, public dialog: MatDialog) { }\n  spinnerFlag;\n  displayedColumns = ['applicationNo', 'customer.firstName', 'accountType', 'status', 'open'];\n  search;\n  dataSource;\n\n  ngOnInit(): void {\n\n    this.dataSource = new MatTableDataSource(null);\n    this.search = this.fb.group({\n      applicationNo: [\"\"],\n      fromCreatedDate: [\"\"],\n      toCreatedDate: [\"\"]\n    })\n  }\n  onSubmit() {\n    this.service.search(this.search.value).subscribe(data => {\n      this.dataSource.data= data\n      this.dataSource.sort = this.sort;\n      this.dataSource.paginator = this.paginator;\n    })\n  }\n  openDialog(rowData) {\n    console.log(rowData)\n    let dialogRef = this.dialog.open(SearchDialogComponent, {\n      data: { application: rowData }\n    })\n  }\n}\n","<h2 style=\"padding: 10px;\">Search</h2>\n<form [formGroup]=\"search\">\n    <mat-form-field appearance=\"outline\">\n        <mat-label>applicationNo</mat-label>\n        <input matInput placeholder=\"enter your Application No\" formControlName=\"applicationNo\">\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>created From Date</mat-label>\n        <input matInput placeholder=\"enter your Created from date\" [matDatepicker]=\"picker\"\n            formControlName=\"fromCreatedDate\">\n        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n        <mat-datepicker #picker></mat-datepicker>\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>created To Date</mat-label>\n        <input matInput placeholder=\"enter your Created to date\" [matDatepicker]=\"picker1\"\n            formControlName=\"toCreatedDate\">\n        <mat-datepicker-toggle matSuffix [for]=\"picker1\"></mat-datepicker-toggle>\n        <mat-datepicker #picker1></mat-datepicker>\n    </mat-form-field>\n    <div align=\"center\">\n        <button type=\"submit\" (click)=\"onSubmit()\" mat-raised-button color=\"primary\">Search</button>\n    </div>\n</form>\n<mat-divider></mat-divider>\n     <div class=\"ta\">\n        <div class=\"mat-elevation-z8 \">\n            <table mat-table [dataSource]=\"dataSource\" matSort>\n\n                <ng-container matColumnDef=\"applicationNo\">\n                    <th mat-header-cell *matHeaderCellDef> ApplicationNo. </th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element.applicationNo}} </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"customer.firstName\">\n                    <th mat-header-cell *matHeaderCellDef> FirstName </th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element.customer.firstName}} </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"accountType\">\n                    <th mat-header-cell *matHeaderCellDef> Account Type </th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element.accountType.accountTypeName}} </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"status\">\n                    <th mat-header-cell *matHeaderCellDef> status </th>\n                    <td mat-cell *matCellDef=\"let element\"> {{element.status}} </td>\n                </ng-container>\n\n                <ng-container matColumnDef=\"open\">\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header> Link </th>\n                    <td mat-cell *matCellDef=\"let element\">\n                        <mat-icon (click)=\"openDialog(element)\">open_in_new</mat-icon>\n                    </td>\n                </ng-container>\n\n                <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n            </table>\n\n            <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\n        </div>\n    </div> ","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { EmployeeType } from 'src/app/model/employeeType';\nimport { CardType } from 'src/app/model/cardType';\nimport { AccountType } from 'src/app/model/accountType';\nimport { Application } from 'src/app/model/application';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AppServiceService {\n  url = \"http://localhost:8085\";\n  //url =\"https://accountopeningproject.herokuapp.com\"\n  constructor(private http: HttpClient) { }\n\n  getAllEmployeeType() {\n    return this.http.get<EmployeeType[]>(this.url + \"/dataentry/getAllEmployeeType\")\n  }\n  getAllCardType() {\n    return this.http.get<CardType[]>(this.url + \"/dataentry/getAllCardType\")\n  }\n  getAllAccountType() {\n    return this.http.get<AccountType[]>(this.url + \"/dataentry/getAllAccountType\")\n  }\n  insertApplication(data) {\n    return this.http.post<Application>(this.url + \"/dataentry/insertApplication\", data)\n  }\n  getAllVerifierData() {\n    return this.http.get<Application[]>(this.url + \"/dataentry/getAllSubmitApplication\");\n  }\n  setAllVerifierStatus(data) {\n    return this.http.put<Application>(this.url + \"/dataentry/verfierStatus\", data);\n  }\n  getAllReworkData() {\n    return this.http.get<Application[]>(this.url + \"/dataentry/getAllReworkData\");\n  }\n  updateApplication(data){\n    console.log(\"Service Request\",data)\n    return this.http.put<Application>(this.url +\"/dataentry/updateApplication\", data);\n  }\n  getCountRework(){\n    return this.http.get<Number>(this.url + \"/dataentry/getCountRework\");\n  }\n  getCountVerifier(){\n    return this.http.get<Number>(this.url + \"/dataentry/getCountVerifier\");\n  }\n  search(data){\n    return this.http.patch<Application[]>(this.url + \"/dataentry/Search\", data);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { AppServiceService } from './app-service.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CountService {\n  verifier;\n  rework;\n  constructor(private service:AppServiceService) {\n    this.verifier = new BehaviorSubject<Number>(0);\n    this.rework = new BehaviorSubject<Number>(0);\n  }\n  getverifierCount(): Observable<Number> {\n    return this.verifier.asObservable();\n  }\n  setverifierCount(data): void {\n    this.verifier.next(data);\n  }\n\n  getReworkCount(): Observable<Number> {\n    return this.rework.asObservable();\n  }\n  setReworkCount(data): void {\n    this.rework.next(data); \n  }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { Validators, FormBuilder } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Application } from 'src/app/model/application';\nimport { Gender } from 'src/app/model/gender';\nimport { EmployeeType } from 'src/app/model/employeeType';\nimport { AccountType } from 'src/app/model/accountType';\nimport { CardType } from 'src/app/model/cardType';\nimport { AppServiceService } from '../../service/app-service.service';\nimport { Status } from 'src/app/model/status';\n\n@Component({\n  selector: 'app-verfier-dialog',\n  templateUrl: './verfier-dialog.component.html',\n  styleUrls: ['./verfier-dialog.component.css']\n})\nexport class VerfierDialogComponent implements OnInit {\n\n  constructor(private fb: FormBuilder, public dialogRef: MatDialogRef<VerfierDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any, private service: AppServiceService) { }\n  employeeForm;\n  customerForm;\n  applicationForm;\n  genders: string[] = new Array();\n  employeeTypes: string[] = new Array();\n  accountTypes: String[] = new Array();\n  cardTypes: string[] = new Array();\n  usAmount = 0;\n  errorFlagEmployee;\n  errrorflagCustomer;\n  errorFlagApplication;\n\n  ngOnInit(): void {\n    this.employeeForm = this.fb.group({\n      employeeId: [{ value: '', disabled: true }],\n      firstName: [{ value: '', disabled: true }],\n      designation: [{ value: '', disabled: true }, Validators.required],\n      employeeType: [{ value: '', disabled: true }],\n      salary: [{ value: '', disabled: true }, [Validators.required]]\n    });\n\n    this.customerForm = this.fb.group({\n      customerId: [{ value: '', disabled: true }],\n      firstName: [{ value: '', disabled: true }, [Validators.required]],\n      middleName: [{ value: '', disabled: true }],\n      lastName: [{ value: '', disabled: true }],\n      employee: this.employeeForm,\n      gender: [{ value: '', disabled: true }, Validators.required],\n      age: [{ value: '', disabled: true }, [Validators.required, Validators.pattern('[0-9]{0,2}')]],\n      correspondenceAddress: [{ value: '', disabled: true }, Validators.required],\n      presentAddress: [{ value: '', disabled: true }, Validators.required],\n      permanentAddress: [{ value: '', disabled: true }, Validators.required]\n    });\n\n    this.applicationForm = this.fb.group({\n      accountType: [{ value: '', disabled: true }, [Validators.required]],\n      applicationNo: [{ value: '', disabled: true }],\n      customer: this.customerForm,\n      cardType: [{ value: '', disabled: true }, [Validators.required]],\n      overeseasAccount: [{ value: '', disabled: true }, Validators.required],\n      createUser: [{ value: '', disabled: true }],\n      createDate: [{ value: '', disabled: true }],\n      lastModifiedUser: [{ value: '', disabled: true }],\n      lastModifiedDate: [{ value: '', disabled: true }],\n      status: [{ value: '', disabled: true }]\n    });\n\n    this.applicationForm.get('applicationNo')\n    for (let item in Gender) {\n      if (isNaN(Number(item))) {\n        this.genders.push(item)\n      }\n    }\n\n    this.service.getAllEmployeeType().subscribe(data => {\n      data.forEach(da => {\n        this.employeeTypes.push(da.employeeTypeName);\n      });\n    })\n\n    this.service.getAllAccountType().subscribe(data => {\n      console.log(data);\n      data.forEach(da => {\n        console.log(da)\n        this.accountTypes.push(da.accountTypeName);\n      });\n    })\n    \n    this.service.getAllCardType().subscribe(data => {\n      data.forEach(da => {\n        this.cardTypes.push(da.cardTypeName);\n      });\n\n    })\n\n\n    const application = this.data.application;\n    console.log(application)\n    application.overeseasAccount = application.overeseasAccount.toString();\n    this.applicationForm.setValue(application);\n    this.applicationForm.get('accountType').setValue(this.applicationForm.get('accountType').value.accountTypeName);\n    this.applicationForm.get('cardType').setValue(this.applicationForm.get('cardType').value.cardTypeName)\n    this.employeeForm.get('employeeType').setValue(this.employeeForm.get('employeeType').value.employeeTypeName)\n\n    console.log();\n    console.log(application.accountType);\n\n  }\n  get firstName() {\n    return this.customerForm.get('firstName');\n  }\n\n  get middleName() {\n    return this.customerForm.get('middleName');\n  }\n\n  get lastName() {\n    return this.customerForm.get('lastName');\n  }\n  get gender() {\n    return this.customerForm.get('gender');\n  }\n  get correspondenceAddress() {\n    return this.customerForm.get('correspondenceAddress');\n  }\n  get presentAddress() {\n    return this.customerForm.get('presentAddress');\n  }\n  get permanentAddress() {\n    return this.customerForm.get('permanentAddress');\n  }\n  get designation() {\n    return this.employeeForm.get('designation');\n  }\n  get salary() {\n    return this.employeeForm.get('salary');\n  }\n  get age() {\n    return this.customerForm.get('age');\n  }\n  get accountType() {\n    return this.applicationForm.get('accountType');\n  }\n  get cardType() {\n    return this.applicationForm.get('cardType');\n  }\n  get overeseasAccount() {\n    return this.applicationForm.get('overeseasAccount')\n  }\n\n  updateUSAmount(event) {\n    this.usAmount = event.target.value;\n  }\n  approve() {\n    this.applicationForm.get(\"status\").setValue(Status.APPROVE);\n    this.dialogRef.close(this.applicationForm.value);\n  }\n  rework() {\n    this.applicationForm.get(\"status\").setValue(Status.REWORK);\n    this.dialogRef.close(this.applicationForm.value);\n  }\n  reject() {\n    this.applicationForm.get(\"status\").setValue(Status.REJECT);\n    this.dialogRef.close(this.applicationForm.value);\n  }\n  cancel() {\n    this.applicationForm.get(\"status\").setValue(Status.CANCEL);\n    this.dialogRef.close(this.applicationForm.value);\n  }\n  getId(index, account: AccountType) {\n    return account.accountTypeId;\n  }\n}\n","<h2 mat-dialog-title>Verifier WorkItem</h2>\n<mat-dialog-content class=\"mat-typography\">\n\n<form [formGroup]=\"applicationForm\">\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Application Id</mat-label>\n        <input matInput placeholder=\"enter your Application id\" formControlName=\"applicationNo\" readonly required>\n    </mat-form-field>\n\n<div [formGroup]=\"customerForm\" >\n    <mat-form-field appearance=\"outline\">\n        <mat-label>FirstName</mat-label>\n        <input matInput placeholder=\"enter your firstName\" formControlName=\"firstName\" required readonly>\n        <div style=\" text-align: right;\" *ngIf=\"firstName.invalid && firstName.touched || errrorflagCustomer\"\n            class=\"text-danger\">\n            <small *ngIf=\"firstName.errors?.required\"> FirstNmae is Required</small>\n        </div>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n        <mat-label>MiddleName</mat-label>\n        <input matInput placeholder=\"enter your middleName\" formControlName=\"middleName\" required readonly>\n        <div style=\" text-align: right;\" *ngIf=\"middleName.invalid && middleName.touched || errrorflagCustomer\"\n            class=\"text-danger\">\n            <small *ngIf=\"middleName.errors?.required\"> MiddleName is Required</small>\n        </div>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n        <mat-label>LastName</mat-label>\n        <input matInput placeholder=\"enter your lastName\" formControlName=\"lastName\" required readonly>\n        <div style=\" text-align: right;\" *ngIf=\"lastName.invalid && lastName.touched || errrorflagCustomer\"\n            class=\"text-danger\">\n            <small *ngIf=\"lastName.errors?.required\"> lastName is Required</small>\n        </div>\n    </mat-form-field>\n\n    <div style=\"margin-left: 10px;\">\n        <label>Gender: </label>\n        <mat-radio-group formControlName=\"gender\" >\n            <mat-radio-button *ngFor=\"let gen of genders\" [value]=\"gen\">{{gen}}</mat-radio-button>\n        </mat-radio-group>\n        <div *ngIf=\"gender.invalid && gender.touched || errrorflagCustomer\" class=\"text-danger\">\n            <small *ngIf=\"gender.errors?.required\"> Gender is Required</small>\n        </div>\n    </div>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Age</mat-label>\n        <input matInput placeholder=\"enter your Age\" formControlName=\"age\" required>\n        <div style=\" text-align: right;\" *ngIf=\"age.invalid && age.touched || errrorflagCustomer\" class=\"text-danger\">\n            <small *ngIf=\"age.errors?.required\"> Age is Required</small>\n            <small *ngIf=\"age.errors?.pattern\"> Age has to between 0 to 99</small>\n\n        </div>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Correspondence Address</mat-label>\n        <textarea formControlName=\"correspondenceAddress\" matInput\n            placeholder=\"enter your Correspondence Address\"></textarea>\n        <div style=\" text-align: right;\"\n            *ngIf=\"correspondenceAddress.invalid && correspondenceAddress.touched || errrorflagCustomer\"\n            class=\"text-danger\">\n            <small *ngIf=\"correspondenceAddress.errors?.required\"> Correspondence Address is Required</small>\n        </div>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n        <mat-label>present Address </mat-label>\n        <textarea formControlName=\"presentAddress\" matInput placeholder=\"enter your Correspondence Address\"></textarea>\n        <div style=\" text-align: right;\" *ngIf=\"presentAddress.invalid && presentAddress.touched || errrorflagCustomer\"\n            class=\"text-danger\">\n            <small *ngIf=\"presentAddress.errors?.required\"> Present Address is Required</small>\n        </div>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Permanent Address</mat-label>\n        <textarea formControlName=\"permanentAddress\" matInput\n            placeholder=\"enter your permanentAddress Address\"></textarea>\n        <div style=\" text-align: right;\"\n            *ngIf=\"permanentAddress.invalid && permanentAddress.touched || errrorflagCustomer\" class=\"text-danger\">\n            <small *ngIf=\"permanentAddress.errors?.required\"> Permanent Address is Required</small>\n        </div>\n    </mat-form-field>\n</div>\n\n    \n\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Account Type</mat-label>\n        <mat-select formControlName=\"accountType\">\n            <mat-option *ngFor=\"let type of accountTypes; trackBy getId;\" [value]=\"type\">\n                {{type}}\n            </mat-option>\n        </mat-select>\n        <div style=\" text-align: right;\" *ngIf=\"accountType.invalid && accountType.touched || errorFlagApplication\"\n            class=\"text-danger\">\n            <small *ngIf=\"accountType.errors?.required\"> Account Type is Required</small>\n        </div>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Card Type</mat-label>\n        <mat-select formControlName=\"cardType\">\n            <mat-option *ngFor=\"let type of cardTypes\" [value]=\"type\">\n                {{type}}\n            </mat-option>\n        </mat-select>\n        <div style=\" text-align: right;\" *ngIf=\"cardType.invalid && cardType.touched || errorFlagApplication\"\n            class=\"text-danger\">\n            <small *ngIf=\"cardType.errors?.required\"> Card Type is Required</small>\n        </div>\n    </mat-form-field>\n\n    <div style=\"margin-left: 10px;\">\n        <label>Overeseas Account: </label>\n        <mat-radio-group formControlName=\"overeseasAccount\">\n            <mat-radio-button value=\"true\">Yes</mat-radio-button>\n            <mat-radio-button value=\"false\">No</mat-radio-button>\n        </mat-radio-group>\n        <div *ngIf=\"overeseasAccount.invalid && overeseasAccount.touched || errorFlagApplication\" class=\"text-danger\">\n            <small *ngIf=\"overeseasAccount.errors?.required\"> Overeseas Account is Required</small>\n        </div>\n    </div>\n<div [formGroup]=\"employeeForm\">\n\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Designation</mat-label>\n        <input matInput placeholder=\"enter your Designation\" formControlName=\"designation\" required>\n        <div style=\" text-align: right;\" *ngIf=\"designation.invalid && designation.touched || errorFlagEmployee\"\n            class=\"text-danger\">\n            <small *ngIf=\"designation.errors?.required\"> Designation is Required</small>\n        </div>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Employee Type</mat-label>\n        <mat-select formControlName=\"employeeType\">\n            <mat-option *ngFor=\"let type of employeeTypes\" [value]=\"type\">\n                {{type}}\n            </mat-option>\n        </mat-select>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n        <mat-label>salary</mat-label>\n        <input matInput placeholder=\"enter your salary\" mvndrMatCurrencyFormat [allowNegative]=\"false\"\n            [currencyCode]=\"'INR'\" [value]=\"usAmount\" (blur)=\"updateUSAmount($event)\" required formControlName=\"salary\">\n        <div style=\" text-align: right;\" *ngIf=\"salary.invalid && salary.touched || errorFlagEmployee\"\n            class=\"text-danger\">\n            <small *ngIf=\"salary.errors?.required\"> salary is Required</small>\n        </div>\n    </mat-form-field>\n\n</div>\n</form>\n</mat-dialog-content>\n<mat-dialog-actions align=\"end\">\n    <button mat-raised-button color=\"primary\" (click)=approve()>Approve</button>\n    <button mat-raised-button color=\"primary\" (click)=rework()>Rework</button>\n    <button mat-raised-button color=\"primary\" (click)=reject()>Reject</button>\n    <button mat-raised-button color=\"primary\" (click)=cancel()>Cancel</button>\n\n  </mat-dialog-actions>","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatSort } from '@angular/material/sort';\nimport { AppServiceService } from '../service/app-service.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { VerfierDialogComponent } from './verfier-dialog/verfier-dialog.component';\nimport { CountService } from '../service/count.service';\nimport { MatPaginator } from '@angular/material/paginator';\n\n@Component({\n  selector: 'app-verfier',\n  templateUrl: './verfier.component.html',\n  styleUrls: ['./verfier.component.css']\n})\nexport class VerfierComponent implements OnInit {\n\n  dataSource;\n  spinnerFlag;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\n\n  displayedColumns = ['applicationNo', 'customer.firstName', 'accountType', 'status', 'open'];\n\n  constructor(private count: CountService, private service: AppServiceService, public dialog: MatDialog) { }\n\n  ngOnInit() {\n    this.service.getAllVerifierData().subscribe((data) => {\n      this.dataSource = new MatTableDataSource(data);\n      this.dataSource.sort = this.sort;\n      this.dataSource.paginator = this.paginator;\n\n    })\n\n  }\n\n  openDialog(rowData) {\n    let dialogRef = this.dialog.open(VerfierDialogComponent, {\n      data: { application: rowData }\n    })\n\n    dialogRef.afterClosed().subscribe(data => {\n      this.spinnerFlag = true;\n      console.log(data);\n      this.service.setAllVerifierStatus(data).subscribe((response) => {\n        this.service.getCountVerifier().subscribe(data=>{\n          this.service.getCountRework().subscribe(data1=>{\n            this.count.setverifierCount(data);\n            this.count.setReworkCount(data1);\n                        this.spinnerFlag = false;\n            console.log(response);\n            this.ngOnInit();\n          })\n        })        \n       \n\n      })\n    })\n  }\n\n\n\n}\n","<h2 style=\"padding: 10px;\">Verfier Work List</h2>\n<mat-divider></mat-divider>\n<mat-spinner *ngIf=\"spinnerFlag\"></mat-spinner>\n<div class=\"ta\">\n<div class=\"mat-elevation-z8 \">\n    <table  mat-table [dataSource]=\"dataSource\" matSort>\n  \n      <!-- Position Column -->\n      <ng-container matColumnDef=\"applicationNo\">\n        <th mat-header-cell *matHeaderCellDef> ApplicationNo. </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.applicationNo}} </td>\n      </ng-container>\n  \n      <!-- Name Column -->\n      <ng-container matColumnDef=\"customer.firstName\">\n        <th mat-header-cell *matHeaderCellDef> FirstName </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.customer.firstName}} </td>\n      </ng-container>\n  \n      <!-- Weight Column -->\n      <ng-container matColumnDef=\"accountType\">\n        <th mat-header-cell *matHeaderCellDef> Account Type </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.accountType.accountTypeName}} </td>\n      </ng-container>\n  \n      <!-- Symbol Column -->\n      <ng-container matColumnDef=\"status\">\n        <th mat-header-cell *matHeaderCellDef> Symbol </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.status}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"open\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Link </th>\n        <td mat-cell *matCellDef=\"let element\">\n            <mat-icon (click)=\"openDialog(element)\" >open_in_new</mat-icon>\n        </td>\n    </ng-container>\n  \n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n    </table>\n  \n    <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.css']\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<mat-toolbar color=\"primary\" >\n    <div class=\"center\">\n        <span >  @copyRights</span>\n       </div>\n</mat-toolbar>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor(private route:Router) { }\n  username;\n  roles;\n  ngOnInit(): void {\n    this.username=localStorage.getItem(\"username\");\n    this.roles= localStorage.getItem(\"roles\");\n  }\n  logout(){\n    localStorage.clear();\nthis.route.navigate([\"login\"]);\n  }\n}\n","<mat-toolbar color=\"primary\">\n    <button mat-icon-button class=\"example-icon\" aria-label=\"Example icon-button with menu icon\">\n        <mat-icon>account_balance</mat-icon>\n    </button>\n    <span>Account Opening Application</span>\n    <span class=\"example-spacer\"></span>\n    <div style=\"padding:0.5cm ;\"><small><b>user:</b> {{username}}</small><br><small><b>Roles:</b> {{roles}}</small>\n        <br>\n    </div>\n    <button mat-flat-button color=\"accent\" (click)=logout()>Sign out</button>\n\n</mat-toolbar>\n\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","\n<app-header></app-header>\n<!-- <app-footer></app-footer> -->\n<div  style=\"display: flex; width: 100%; height: 83%;\">\n<app-menu style=\"width: 20%;\"></app-menu>\n<mat-divider [vertical]=\"true\" ></mat-divider>\n<app-body style=\" width:80%;\"></app-body>\n</div>\n<app-footer ></app-footer>\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { CountService } from '../body/service/count.service';\nimport { AppServiceService } from '../body/service/app-service.service';\n\n@Component({\n  selector: 'app-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.css']\n})\nexport class MenuComponent implements OnInit {\n\n  constructor(private count: CountService, private service: AppServiceService) { }\n  roles: string;\n  role: string[];\n  verifierCount: Number = 0;\n  reworkCount: Number = 0;\n  ngOnInit(): void {\n    this.roles = localStorage.getItem(\"roles\")\n    this.role = this.roles.split(\",\");\n    if (this.reworkCount != null || this.verifierCount != null) {\n      this.service.getCountVerifier().subscribe(data => {\n        this.service.getCountRework().subscribe(data1 => {\n          this.count.setverifierCount(data);\n          this.count.setReworkCount(data1);\n        })\n      })\n    }\n    this.count.getverifierCount().subscribe(co => {\n      this.verifierCount = co;\n      console.log(\"verifiercoun\", this.verifierCount)\n    })\n    this.count.getReworkCount().subscribe(co => {\n      this.reworkCount = co;\n      console.log(\"reworkCount\", this.reworkCount)\n    })\n  }\n\n}\n","<mat-list>\n    <div *ngIf=\"role.includes('ROLE_dataentery')\">\n        <mat-list-item>\n            <a mat-flat-button routerLink=\"create\" style=\"color:#ff4081;\" ><b>Create\n                    Account</b></a>\n        </mat-list-item>\n        <mat-divider></mat-divider>\n    </div>\n    <div *ngIf=\"role.includes('ROLE_dataentery')\">\n        <mat-list-item>\n            <a mat-flat-button routerLink=\"rework\" style=\"color:#ff4081;\" ><b><span matBadgeOverlap=\"false\" matBadgeHidden=\"{{reworkCount==0?'true':'false'}}\" [matBadge]=\"reworkCount\" matBadgePosition=\"after above\">Rework</span></b></a>\n        </mat-list-item>\n        <mat-divider></mat-divider>\n    </div>\n    <div *ngIf=\"role.includes('ROLE_dataverifier')\">\n        <mat-list-item> \n            <a mat-flat-button routerLink=\"verifier\" style=\"color:#ff4081;\" ><b><span matBadgeOverlap=\"false\" matBadgeHidden=\"{{verifierCount==0?'true':'false'}}\" [matBadge]=\"verifierCount\" matBadgePosition=\"after above\">Verify</span></b></a>\n        </mat-list-item>\n        <mat-divider></mat-divider>\n    </div>\n    <div *ngIf=\"role.includes('ROLE_dataverifier') || role.includes('ROLE_dataentery')\">\n        <mat-list-item>\n            <a mat-flat-button routerLink=\"search\" style=\"color:#ff4081;\"><b>Search</b></a>\n        </mat-list-item>\n    </div>\n</mat-list>\n","import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n  useClass: InterceptorService,\n\n})\nexport class InterceptorService implements HttpInterceptor {\n\n  constructor() { }\n  intercept(request: HttpRequest<any>, next: HttpHandler) {\n    const token = localStorage.getItem(\"token\");\n    var req;\n    console.log(token)\n    if (token) {\n      req = request.clone({ headers: request.headers.set('Authorization', token) })\n    }\n    else{\n      req= request.clone();\n    }\n    return next.handle(req);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { InterceptorService } from './interceptor.service';\r\n\r\nexport const HttpInterceptorProviders = [\r\n    { provide: HTTP_INTERCEPTORS, useClass:InterceptorService , multi: true },\r\n  ];","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { LoginService } from './service/login.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  constructor(private fb: FormBuilder, private service: LoginService, private route:Router) { }\n  flag = false;\n  form;\n  ngOnInit(): void {\n    this.form = this.fb.group({\n      username: ['', [Validators.required, Validators.minLength(3)]],\n      password: ['', [Validators.required, Validators.minLength(3)]]\n    })\n\n\n  }\n  get username() {\n    return this.form.get(\"username\");\n  }\n  get password() {\n    return this.form.get(\"password\");\n  }\n  login() {\n    console.log(this.form.value)\n    this.service.login(this.form.value).subscribe(data => { \n      localStorage.setItem(\"token\", data.token)\n      var roles=\"\";\n      data.authority.forEach(role=>{\n        if(roles!=\"\")\n        roles+=\",\";\n        roles+=role.authority;\n      })\n      localStorage.setItem(\"username\", this.username.value)\n      localStorage.setItem(\"roles\",roles);\n      this.route.navigate([\"aoa\"])\n    },error=>{\n      this.flag=true; \n    }\n    )\n  }\n\n}\n","<div style=\"display: flex; height: 100%;\">\r\n    <div style=\"width: 70%;\">\r\n        <img style=\"height: 100%; width: 100%;\" src=\"https://businessfirstfamily.com/wp-content/uploads/2019/01/mistakes-open-bank-account.jpg\" alt=\"\">\r\n        \r\n    </div>\r\n    <div style=\"width: 30%; padding: 1%\">\r\n  \r\n        <div class=\"form width\">\r\n            <h1 class=\" pt-4\">Welcome back</h1>\r\n            <form [formGroup]=\"form\">\r\n                <mat-form-field class=\"width-100\" appearance=\"outline\">\r\n                    <mat-label>UserName</mat-label>\r\n                    <input matInput placeholder=\"Enter here UserName\" required formControlName=\"username\">\r\n                    <div style=\" text-align: right;\" *ngIf=\"username.invalid && username.touched\"\r\n                        class=\"text-danger\">\r\n                        <small *ngIf=\"username.errors?.required\"> UserName is Requried</small>\r\n                        <small *ngIf=\"username.errors?.minlength\">UserName have to minimum length is 3\r\n                            char</small>\r\n                    </div>\r\n                </mat-form-field>\r\n\r\n                <mat-form-field class=\"width-100\" appearance=\"outline\">\r\n                    <mat-label>Password</mat-label>\r\n                    <input type=\"password\" matInput placeholder=\"Enter here Password\" formControlName=\"password\"\r\n                        required>\r\n                    <div style=\" text-align: right;\" *ngIf=\"password.invalid && password.touched\"\r\n                        class=\"text-danger\">\r\n                        <small *ngIf=\"password.errors?.required\"> Password is Requried</small>\r\n                        <small *ngIf=\"password.errors?.minlength\">Password have to minimum length is 3\r\n                            char</small>\r\n                    </div>\r\n                </mat-form-field>\r\n                <h2 class=\"text-danger\" *ngIf=\"flag\">Invalid credentials</h2>\r\n\r\n                <button type=\"submit\" class=\"flied\" mat-raised-button color=\"primary\" [disabled]=\"form.invalid\"\r\n                    (click)=\"login()\">Login</button>\r\n\r\n            </form>\r\n        </div>\r\n\r\n    </div>\r\n</div>\r\n\r\n","import { Injectable } from '@angular/core';\nimport {  HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Token } from 'src/app/model/token';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n  url = \"http://localhost:8085\";\n  //url =\"https://accountopeningproject.herokuapp.com\"\n  constructor(private http: HttpClient) { }\n \n  login(userDetails):Observable<Token>{\n    console.log(userDetails)\n    return this.http.post<Token>(this.url+\"/login\", userDetails)\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatBadgeModule} from '@angular/material/badge';\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatListModule} from '@angular/material/list';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatTreeModule} from '@angular/material/tree';\n\n@NgModule({\n  exports: [\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n \n  ]\n})\nexport class MaterialModule { }\n","export enum Gender{\r\n\tMALE, FEMALE, OTHER\r\n}","export enum Status{\r\n    REJECT, APPROVE, REWORK, CANCEL, SUBMIT, RESUBMITT\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}